<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surf_pause = -1;
buff_pause = -1;

actors = 0;
actors_last = -1;

// menu properties
menu = 0;
menu_xto = 40;
menu_yto = 64;
menu_x = menu_xto;
menu_y = menu_yto;

// selection
select_x = 0;
select_y = 0;
rebind = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var gpcount_old = global.gpcount;
gamepad_update();

var pause_old = global.pause;
if (!global.pause)
    {
    actors = instance_number(par_actor);
    if (actors != actors_last)
        {
        actors_last = actors;
        event_user(0);
        }
    
    // controller disconnected
    if (global.gpcount &lt; gpcount_old)
        {
        global.pause = true;
        instance_create(0,0,obj_gamepad_disconnect);
        }
    
    // pausing
    if ((keyboard_check_pressed(ord("P")))
    or (gamepad_check_pressed_all(gpinput.start)))
    and (!instance_exists(obj_gamepad_disconnect))
    and (!global.DEBUG)
        global.pause = true;
    }
else
    {
    // input
    var input_left = keyboard_check_pressed(vk_left) or gamepad_check_pressed_all(gpinput.padl);
    var input_right = keyboard_check_pressed(vk_right) or gamepad_check_pressed_all(gpinput.padr);
    var input_up = keyboard_check_pressed(vk_up) or gamepad_check_pressed_all(gpinput.padu);
    var input_down = keyboard_check_pressed(vk_down) or gamepad_check_pressed_all(gpinput.padd);
    var input_select = keyboard_check_pressed(ord("Z")) or keyboard_check_pressed(ord("X"));
        input_select = input_select or gamepad_check_pressed_all(gpinput.face1) or gamepad_check_pressed_all(gpinput.face3);
    
    // reset selection changes
    var sx_enable = false;
    var sy_enable = false;
    var sx_max = 0;
    var sy_max = 0;
    
    var menu_old = menu;
    switch(menu)
        {
        case 0: // main menu
            if (input_select)
                {
                if (select_y == 0) // resume
                    global.pause = false;
                else if (select_y == 1) // options
                    menu = 1;
                else if (select_y == 2) // return to menu
                    menu = 6;
                else if (select_y == 3) // return to desktop
                    menu = 7;
                }
            
            sy_enable = true;
            sy_max = 3;
            break;
        
        case 1: // settings
            if (input_select)
                {
                if (select_y == 0)
                    menu = 2; // video
                else if (select_y == 1)
                    menu = 3; // audio
                else if (select_y == 2)
                    menu = 4; // keyboard controls
                else if (select_y == 3)
                    menu = 5; // gamepad controls
                else if (select_y == 4) // back
                    {
                    menu = 0;
                    config_save();
                    }
                }
            
            sy_enable = true;
            sy_max = 4;
            break;
        
        case 2: // video settings
            if (input_select)
                {
                if (select_y == 0)
                    {
                    global.CFG[config.fullscreen] = !global.CFG[config.fullscreen];
                    config_action(config.fullscreen);
                    }
                else if (select_y == 1)
                    {
                    global.CFG[config.windowScale]++;
                    config_action(config.windowScale);
                    }
                else if (select_y == 2) // vsync
                    {
                    global.CFG[config.vsync] = !global.CFG[config.vsync];
                    config_action(config.vsync);
                    }
                else if (select_y == 3)
                    {
                    global.CFG[config.CRTeffect] += 0.25;
                    if (global.CFG[config.CRTeffect] &gt; 1)
                        global.CFG[config.CRTeffect] = 0;
                    config_action(config.CRTeffect);
                    }
                else if (select_y == 4)
                    {
                    global.CFG[config.particles] = !global.CFG[config.particles];
                    config_action(config.particles);
                    }
                else if (select_y == 5)
                    menu = 1;
                }
            
            sy_enable = true;
            sy_max = 5;
            break;
        
        case 3: // audio settings
            if (input_select)
                {
                if (select_y == 0)
                    {
                    global.CFG[config.BGMgain] += 0.25;
                    if (global.CFG[config.BGMgain] &gt; 1)
                        global.CFG[config.BGMgain] = 0;
                    }
                else if (select_y == 1)
                    {
                    global.CFG[config.SFXgain] += 0.25;
                    if (global.CFG[config.SFXgain] &gt; 1)
                        global.CFG[config.SFXgain] = 0;
                    }
                else if (select_y == 2)
                    menu = 1;
                }
            
            sy_enable = true;
            sy_max = 2;
            break;
        
        case 4: // keyboard controls
            if (select_x == 0)
                {
                var _start  = config.keyL1;
                var _end    = config.keySwap1;
                }
            else
                {
                var _start  = config.keyL2;
                var _end    = config.keySwap2;
                }
            
            if (rebind)
                {
                var newkey = key_last();
                if (newkey &gt; -1)
                    {
                    rebind = false;
                    
                    // resolve conflict by unbinding existing keybind
                    for(var i=_start; i&lt;=_end; i++;)
                        {
                        if (global.CFG[i] == newkey)
                            global.CFG[i] = -2;
                        }
                    // bind to new key
                    if (select_y &gt;= 0) and (select_y &lt;= 6)
                        global.CFG[_start+select_y] = newkey;
                    }
                }
            else
                {
                if (input_select)
                    {
                    if (select_y &gt;= 0) and (select_y &lt;= 6)
                        {
                        rebind = true;
                        // temp unset keybind
                        global.CFG[_start+select_y] = -1;
                        }
                    else
                        {
                        // return to settings menu
                        var ready = true;
                        for(var i=_start; i&lt;=_end; i++;)
                            {
                            if (global.CFG[i] &lt; 0)
                                ready = false;
                            }
                        if (ready)
                            menu = 1;
                        }
                    }
                
                sx_enable = true;
                sx_max = 1;
                sy_enable = true;
                sy_max = 7;
                }
            break;
        
        case 5: // gamepad controls
            if (select_x == 0)
                {
                var _start  = config.padL1;
                var _end    = config.padSwap1;
                }
            else
                {
                var _start  = config.padL2;
                var _end    = config.padSwap2;
                }
            
            if (rebind)
                {
                var newpad = gamepad_last_all();
                if (newpad &gt; -1)
                    {
                    rebind = false;
                    // resolve conflict by unbinding existing keybind
                    for(var i=_start; i&lt;=_end; i++;)
                        {
                        if (global.CFG[i] == newpad)
                            global.CFG[i] = -2;
                        }
                    // bind to new key
                    if (select_y &gt;= 0) and (select_y &lt;= 6)
                        global.CFG[_start+select_y] = newpad;
                    }
                }
            else
                {
                if (input_select)
                    {
                    if (select_y &gt;= 0) and (select_y &lt;= 6)
                        {
                        rebind = true;
                        // temp unset keybind
                        global.CFG[_start+select_y] = -1;
                        }
                    else
                        {
                        // return to settings menu
                        if (select_x == 0)
                            {
                            var ready = true;
                            for(var i=config.padL1; i&lt;=config.padSwap2; i++;)
                                {
                                if (global.CFG[i] &lt; 0)
                                    ready = false;
                                }
                            if (ready)
                                menu = 1;
                            }
                        else if (select_x == 1)
                            global.CFG[config.padType] = !global.CFG[config.padType];
                        }
                    }
                
                sx_enable = true;
                sx_max = 1;
                sy_enable = true;
                sy_max = 7;
                }
            break;
        
        case 6: // quit to menu confirmation
            if (input_select)
                {
                if (select_y == 0)
                    {
                    instance_destroy();
                    room_goto(menu_room);
                    }
                else if (select_y == 1)
                    menu = 0;
                }
            
            sy_enable = true;
            sy_max = 1;
            break;
        
        case 7: // quit to desktop confirmation
            if (input_select)
                {
                if (select_y == 0)
                    game_end();
                else if (select_y == 1)
                    menu = 0;
                }
            
            sy_enable = true;
            sy_max = 1;
            break;
        }
    
    if (input_select)
        snd_play(snd_menu_select);
    menu_x += (menu_xto-menu_x)*0.25;
    menu_y += (menu_yto-menu_y)*0.25;
    if (menu != menu_old)
        {
        menu_x = 32;
        select_x = 0;
        select_y = 0;
        }
    
    // selection changes
    if (sx_enable)
        {
        if (input_left xor input_right)
            {
            select_x += input_right-input_left;
            snd_play(snd_menu_hover);
            }
        if (select_x &lt; 0)
            select_x = sx_max;
        else if (select_x &gt; sx_max)
            select_x = 0;
        }
    if (sy_enable)
        {
        if (input_up xor input_down)
            {
            select_y += input_down-input_up;
            snd_play(snd_menu_hover);
            }
        if (select_y &lt; 0)
            select_y = sy_max;
        else if (select_y &gt; sy_max)
            select_y = 0;
        }
    }

// update pause surfaces, (de)/activate instances
if (global.pause != pause_old)
    {
    if (global.pause)
        {
        // write app surf to buffer and store in a file
        var temp_buff = buffer_create(view_wview[0]*view_hview[0]*4,buffer_grow,1);
        // store surface in buffer
        buffer_get_surface(temp_buff,application_surface,0,0,0);
        // write buffer to file
        buffer_save(temp_buff,global.CFGsurf);
        // delete buffer
        buffer_delete(temp_buff);
        
        instance_deactivate_all(true);
        instance_activate_object(obj_gamepad_disconnect);
        instance_activate_object(obj_shader);
        }
    else
        instance_activate_all();
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// assign gamepads to players

var _gamepad_q = ds_queue_create();
var _player_q = ds_queue_create();

// check available slots
for(var i=0; i&lt;global.gpmax; i++;)
    {
    if (global.gp[i,gpinfo.connected])
        ds_queue_enqueue(_gamepad_q,i);
    }

// check which players have assigned slots
with(par_actor)
    ds_queue_enqueue(_player_q,id);

// assign remaining players the available slots
var _size = min(ds_queue_size(_gamepad_q),ds_queue_size(_player_q));
while(_size &gt; 0)
    {
    var _gamepad = ds_queue_dequeue(_gamepad_q);
    var _player = ds_queue_dequeue(_player_q);
    
    if (instance_exists(_player)) and (global.gp[_gamepad,gpinfo.connected])
        _player.slot = _gamepad;
    
    _size = min(ds_queue_size(_gamepad_q),ds_queue_size(_player_q));
    }

ds_queue_destroy(_gamepad_q);
ds_queue_destroy(_player_q);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (room == menu_room)
    {
    instance_destroy();
    exit;
    }

actors_last = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.pause)
    {
    // menu bg
    draw_set_color($000000);
    draw_set_alpha(0.75);
    draw_rectangle(0,0,view_wview[0],view_hview[0],0);
    draw_set_alpha(1.0);
    
    if (instance_exists(obj_gamepad_disconnect))
        menu = -1;
    
    // pause menu
    var mx = round(menu_x);
    var my = round(menu_y);
    var col1x = 88;
    var col2x = 224;
    
    draw_set_halign(0);
    draw_set_valign(0);
    
    switch(menu)
        {
        case 0: // main menu
            var i = 0;
            draw_text_outline(mx,my+i++*18,"RESUME");
            draw_text_outline(mx,my+i++*18,"OPTIONS");
            draw_text_outline(mx,my+i++*18,"MAIN MENU");
            draw_text_outline(mx,my+i++*18,"QUIT TO DESKTOP");
            
            draw_sprite(spr_camera_arrow,1,mx-20,my+8+select_y*18);
            break;
        
        case 1: // settings
            var i = 0;
            draw_text_outline(mx,my+i++*18,"VIDEO");
            draw_text_outline(mx,my+i++*18,"AUDIO");
            draw_text_outline(mx,my+i++*18,"KEYBOARD");
            draw_text_outline(mx,my+i++*18,"GAMEPAD");
            draw_text_outline(mx,my+138,"BACK");
            
            if (select_y &lt;= 3)
                draw_sprite(spr_camera_arrow,1,mx-20,my+8+select_y*18);
            else
                draw_sprite(spr_camera_arrow,1,mx-20,my+8+138);
            break;
        
        case 2: // video settings
            var i = 0;
            draw_text_outline(mx,my+i++*18,"FULLSCREEN: "+val_to_text(0,global.CFG[config.fullscreen]));
            draw_text_outline(mx,my+i++*18,"WINDOW SCALE: "+string(global.CFG[config.windowScale])+"X");
            draw_text_outline(mx,my+i++*18,"VSYNC: "+val_to_text(0,global.CFG[config.vsync]));
            draw_text_outline(mx,my+i++*18,"RETRO: "+val_to_text(1,global.CFG[config.CRTeffect]));
            draw_text_outline(mx,my+i++*18,"PARTICLES: "+val_to_text(0,global.CFG[config.particles]));
            draw_text_outline(mx,my+138,"BACK");
            
            if (select_y &lt; 5)
                draw_sprite(spr_camera_arrow,1,mx-20,my+8+select_y*18);
            else
                draw_sprite(spr_camera_arrow,1,mx-20,my+8+138);
            break;
        
        case 3: // audio settings
            var i = 0;
            draw_text_outline(mx,my+i++*18,"MUSIC VOLUME: "+val_to_text(1,global.CFG[config.BGMgain]));
            draw_text_outline(mx,my+i++*18,"SFX VOLUME: "+val_to_text(1,global.CFG[config.SFXgain]));
            draw_text_outline(mx,my+138,"BACK");
            
            if (select_y &lt; 2)
                draw_sprite(spr_camera_arrow,1,mx-20,my+8+select_y*18);
            else
                draw_sprite(spr_camera_arrow,1,mx-20,my+8+138);
            break;
        
        case 4: // keyboard controls
            var i = 0;
            draw_text_outline(mx,my-24,"ACTION",$AAAAAA);
            draw_text_outline(mx,my+i++*18,"LEFT");
            draw_text_outline(mx,my+i++*18,"RIGHT");
            draw_text_outline(mx,my+i++*18,"UP");
            draw_text_outline(mx,my+i++*18,"DOWN");
            draw_text_outline(mx,my+i++*18,"FIRE");
            draw_text_outline(mx,my+i++*18,"JUMP");
            draw_text_outline(mx,my+i++*18,"LOCK");
            
            var i = 0;
            draw_text_outline(mx+col1x,my-24,"P1 KEYBOARD",$AAAAAA);
            draw_text_outline(mx+col1x,my+i++*18,string(key_to_text(global.CFG[config.keyL1])));
            draw_text_outline(mx+col1x,my+i++*18,string(key_to_text(global.CFG[config.keyR1])));
            draw_text_outline(mx+col1x,my+i++*18,string(key_to_text(global.CFG[config.keyU1])));
            draw_text_outline(mx+col1x,my+i++*18,string(key_to_text(global.CFG[config.keyD1])));
            draw_text_outline(mx+col1x,my+i++*18,string(key_to_text(global.CFG[config.keyFire1])))
            draw_text_outline(mx+col1x,my+i++*18,string(key_to_text(global.CFG[config.keyJump1])));
            draw_text_outline(mx+col1x,my+i++*18,string(key_to_text(global.CFG[config.keyLock1])));
            
            var i = 0;
            draw_text_outline(mx+col2x,my-24,"P2 KEYBOARD",$AAAAAA);
            draw_text_outline(mx+col2x,my+i++*18,string(key_to_text(global.CFG[config.keyL2])));
            draw_text_outline(mx+col2x,my+i++*18,string(key_to_text(global.CFG[config.keyR2])));
            draw_text_outline(mx+col2x,my+i++*18,string(key_to_text(global.CFG[config.keyU2])));
            draw_text_outline(mx+col2x,my+i++*18,string(key_to_text(global.CFG[config.keyD2])));
            draw_text_outline(mx+col2x,my+i++*18,string(key_to_text(global.CFG[config.keyFire2])))
            draw_text_outline(mx+col2x,my+i++*18,string(key_to_text(global.CFG[config.keyJump2])));
            draw_text_outline(mx+col2x,my+i++*18,string(key_to_text(global.CFG[config.keyLock2])));
            
            draw_text_outline(mx+col1x,my+138,"BACK");
            
            if (select_y &lt; 7)
                draw_sprite(spr_camera_arrow,1-rebind,mx+col1x-20+select_x*(col2x-col1x),my+8+select_y*18);
            else
                draw_sprite(spr_camera_arrow,1,mx+col1x-20,my+8+138);
            break;
        
        case 5: // gamepad controls
            var i = 0;
            draw_text_outline(mx,my-24,"ACTION",$AAAAAA);
            draw_text_outline(mx,my+i++*18,"LEFT");
            draw_text_outline(mx,my+i++*18,"RIGHT");
            draw_text_outline(mx,my+i++*18,"UP");
            draw_text_outline(mx,my+i++*18,"DOWN");
            draw_text_outline(mx,my+i++*18,"FIRE");
            draw_text_outline(mx,my+i++*18,"JUMP");
            draw_text_outline(mx,my+i++*18,"LOCK");
            
            if (global.CFG[config.padType])
                var pad_spr = spr_buttons_xbox;
            else
                var pad_spr = spr_buttons_ps;
            
            var i = 0;
            draw_text_outline(mx+col1x,my-24,"P1 GAMEPAD",$AAAAAA);
            draw_sprite(pad_spr,pad_to_sprite(global.CFG[config.padL1]),mx+col1x,my+8+i++*18);
            draw_sprite(pad_spr,pad_to_sprite(global.CFG[config.padR1]),mx+col1x,my+8+i++*18)
            draw_sprite(pad_spr,pad_to_sprite(global.CFG[config.padU1]),mx+col1x,my+8+i++*18);
            draw_sprite(pad_spr,pad_to_sprite(global.CFG[config.padD1]),mx+col1x,my+8+i++*18);
            draw_sprite(pad_spr,pad_to_sprite(global.CFG[config.padFire1]),mx+col1x,my+8+i++*18);
            draw_sprite(pad_spr,pad_to_sprite(global.CFG[config.padJump1]),mx+col1x,my+8+i++*18);
            draw_sprite(pad_spr,pad_to_sprite(global.CFG[config.padLock1]),mx+col1x,my+8+i++*18);
            
            var i = 0;
            draw_text_outline(mx+col2x,my-24,"P2 GAMEPAD",$AAAAAA);
            draw_sprite(pad_spr,pad_to_sprite(global.CFG[config.padL2]),mx+col2x,my+8+i++*18);
            draw_sprite(pad_spr,pad_to_sprite(global.CFG[config.padR2]),mx+col2x,my+8+i++*18)
            draw_sprite(pad_spr,pad_to_sprite(global.CFG[config.padU2]),mx+col2x,my+8+i++*18);
            draw_sprite(pad_spr,pad_to_sprite(global.CFG[config.padD2]),mx+col2x,my+8+i++*18);
            draw_sprite(pad_spr,pad_to_sprite(global.CFG[config.padFire2]),mx+col2x,my+8+i++*18);
            draw_sprite(pad_spr,pad_to_sprite(global.CFG[config.padJump2]),mx+col2x,my+8+i++*18);
            draw_sprite(pad_spr,pad_to_sprite(global.CFG[config.padLock2]),mx+col2x,my+8+i++*18);
            
            draw_text_outline(mx+col1x,my+138,"BACK");
            draw_text_outline(mx+col2x,my+138,"TOGGLE STYLE");
            
            if (select_y &lt; 7)
                draw_sprite(spr_camera_arrow,1-rebind,mx+col1x-20+select_x*(col2x-col1x),my+8+select_y*18);
            else
                draw_sprite(spr_camera_arrow,1,mx+col1x-20+select_x*(col2x-col1x),my+8+138);
            break;
        
        case 6: // quit confirmation
            var i = 0;
            draw_text_outline(mx,my+i++*18,"RETURN TO MAIN MENU?");
            draw_text_outline(mx,my+i++*18,"BACK");
            
            draw_sprite(spr_camera_arrow,1,mx-20,my+8+select_y*18);
            break;
        
        case 7: // quit confirmation
            var i = 0;
            draw_text_outline(mx,my+i++*18,"QUIT TO DESKTOP?");
            draw_text_outline(mx,my+i++*18,"BACK");
            
            draw_sprite(spr_camera_arrow,1,mx-20,my+8+select_y*18);
            break;
        }
    
    draw_set_color($000000);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
