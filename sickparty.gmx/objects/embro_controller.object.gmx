<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//populate a ds_list with the ids of the coolers/spawners and shuffle

global.Blist=ds_list_create()

with(cooler)
    ds_list_insert(global.Blist,0,id)
    
ds_list_shuffle(global.Blist)
    

    
PHASE=1

babyrate=60

ratenoise=40


//start the alarm loop to start making babies from the coolers/spawners
alarm[0]=babyrate+random(ratenoise)


//maximum number of flying babies at any one time
//the baby enemy object checks this number before flying
FLYmax=2


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if not(PHASE=1)
exit


//pull one of the baby spawners id
var PULL=ds_list_find_value(global.Blist,0);

ds_list_delete(global.Blist,0)


//if that spawner in the list doesn't exist/has been destroyed, "re roll" and try again in 2 steps
if(instance_number(PULL)=0){
    alarm[0]=2
    exit
}


//tell whatever cooler/spawner to create a baby
with(PULL){

    //the creation code for a baby is in the alarm event of the cooler object
    alarm[0]=2
}


//if list is empty, repopulate and shuffle

with(cooler)
ds_list_insert(global.Blist,0,id)


ds_list_shuffle(global.Blist)




//keep the loop going

alarm[0]=babyrate+random(ratenoise)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(PHASE)
    {
    case 1: // spawning babies
        if (instance_number(cooler) == 0)
            {
            PHASE = 2;
            if (instance_exists(embro))
                embro.nohit = false;
            }
        break;
    
    case 2: // getting lit up
        break;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
