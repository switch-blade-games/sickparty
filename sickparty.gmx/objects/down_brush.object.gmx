<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>over_brush_spr</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>over_brush_mask_spr</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>GOTNT=1
PAINTTNT=2
GORIDE=3
PAINTRIDE=4
DONE=5


TNTx=paint_ride.x
TNTy=180

spe=14

state=GOTNT

PAINTspe=spe

motion_set(point_direction(x,y,TNTx,TNTy),spe)

// clipping mask for paint effect
mask_surf = -1;
clip_surf = -1;
last_x = x;
last_y = y;

// make tnt
for(var i=0; i&lt;4; i++;)
    instance_create(paint_ride.x+(i*40),TNTy,paint_tnt);
with(paint_tnt)
    visible = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(state)
    {
    case GOTNT:
        if (point_distance(x,y,TNTx,TNTy) &lt; speed)
            {
            state = PAINTTNT;
            x = TNTx;
            y = TNTy;
            speed = 0;
            path_start(h_paint_path,PAINTspe,path_action_stop,false);
            }
        break;
    
    case PAINTTNT:
        if (surface_exists(mask_surf))
            {
            var dir = point_direction(last_x,last_y,x,y);
            var len = point_distance(last_x,last_y,x,y);
            var ldx = lengthdir_x(10,dir);
            var ldy = lengthdir_y(10,dir);
            var scl = clamp(len/10,1,2.5);
            
            surface_set_target(mask_surf);
            draw_set_blend_mode(bm_subtract);
            for(var i=0; i&lt;ceil(len/10); i++;)
                draw_sprite_ext(paint_mask_spr,irandom(3),last_x+ldx*i,last_y+ldy*i,scl,scl,dir,$FFFFFF,1);
            draw_set_blend_mode(bm_normal);
            surface_reset_target();
            
            last_x = x;
            last_y = y;
            }
        break;
    
    case GORIDE:
        if (point_distance(x,y,paint_ride.x,paint_ride.y)&lt;spe)
            {
            state = PAINTRIDE;
            path_start(h_paint_path,PAINTspe,path_action_stop,false);
            }
        break;
    
    case DONE:
        if (point_distance(x,y,xstart,ystart) &lt; spe)
            {
            if (surface_exists(mask_surf))
                surface_free(mask_surf);
            if (surface_exists(clip_surf))
                surface_free(clip_surf);
            with(paint_tnt)
                visible = true;
            instance_destroy();
            }
        break;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (state == PAINTTNT)
    {
    state = GORIDE;
    with(paint_tnt)
        ACTIVE = true;
    motion_set(point_direction(x,y,paint_ride.x,paint_ride.y),spe);
    }
else if (state == PAINTRIDE)
    {
    state = DONE;
    with(paint_ride)
        {
        state = DOWN;
        CURRENTspr = anvil_spr;
        motion_set(90,DOWNpush);
        }
    motion_set(point_direction(x,y,xstart,ystart),spe);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!surface_exists(mask_surf))
    {
    mask_surf = surface_create(view_wview[0],view_hview[0]);
    surface_set_target(mask_surf);
    draw_clear(c_black);
    surface_reset_target();
    }
if (!surface_exists(clip_surf))
    clip_surf = surface_create(view_wview[0],view_hview[0]);

// start drawing
surface_set_target(clip_surf);
draw_clear_alpha(c_black,0);
// draw things to clip surface
with(paint_tnt)
    draw_sprite_ext(sprite_index,image_index,x-view_xview[0],y-view_yview[0],image_xscale,image_yscale,image_angle,image_blend,image_alpha);
// draw clip mask
draw_set_blend_mode(bm_subtract);
draw_surface(mask_surf,0,0);
draw_set_blend_mode(bm_normal);
surface_reset_target();

// draw the clip-masked surface
draw_surface(clip_surf,view_xview[0],view_yview[0]);
draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
