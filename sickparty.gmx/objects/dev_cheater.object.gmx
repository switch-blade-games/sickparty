<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.BUILDversion = "v0.13"; // as of 3/14/2020

debugMode = 0; // 0=detail; 1=simple; 2=extra;
event_user(0);

surf_graph = -1;
graph_w = 120;
graph_h = 40;
graph_ind = 0;
fps_num = 60;
fps_ind = 0;
for(var i=fps_num-1; i&gt;=0; i--;)
    fps_avg[i] = 0;
avg_fps = 0;
max_fps = 1;

resourceMode = 0;
resourceCollapse = false;

// index rooms
rooms = 0;
rm_id = -1;
rm_name = -1;
for(var i=room_first+1; i&lt;=room_last; i++;)
    {
    rm_id[rooms]   = i;
    rm_name[rooms] = room_get_name(i);
    rooms++;
    }
// index objects
objects = 0;
obj_id = -1;
obj_name = -1;
obj_sprite = -1;
while(object_exists(objects))
    {
    obj_id[objects]   = objects;
    obj_name[objects] = object_get_name(objects);
    obj_spr[objects]  = object_get_sprite(objects);
    if (obj_spr[objects] == -1)
        obj_spr[objects] = node_spr;
    objects++;
    }

// search
search = "";
// search texbox
txt_search[0] = "";
txt_search[1] = false;
txt_search[2] = "Search";
// results array
results = 0;
result_id = -1;
result_name = -1;
result_spr = -1;
result_select = -1;
result_scroll = 0;
result_slider[0] = 0;
result_slider[1] = sqrt(results+1);
result_slider[2] = false;

event_user(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* JB CODE
if(gamepad_check(0,gpinput.trigr)=true){
    global.yshake=6
}
if(gamepad_check(0,gpinput.trigl)=true){
    with(muslim_boat)
        instance_create(x+40+random(40),y+140,muslim_spin)
    }
*/

// smooth fps stats
if (fps_real &gt; max_fps)
    max_fps = fps_real;
fps_avg[fps_ind] = fps_real;
avg_fps += fps_avg[fps_ind];
fps_ind++;
if (fps_ind &gt;= fps_num)
    fps_ind = 0;
avg_fps -= fps_avg[fps_ind];

// toggle debug mode
if (keyboard_check_pressed(vk_f1))
    {
    debugMode++;
    if (debugMode &gt; 3)
        debugMode = -1;
    global.DEBUG = (debugMode &gt; -1);
    if (!global.DEBUG)
        {
        with(par_actor)
            take_damage = true;
        }
    }

// don't hurt player in debug mode
if (global.DEBUG)
    {
    with(par_actor)
        take_damage = false;
    }

// next room
if (keyboard_check_pressed(vk_pageup))
    {
    if (room_exists(room_next(room)))
        {
        room_goto(room_next(room));
        mus_stop();
        }
    }
// previous room
if (keyboard_check_pressed(vk_pagedown))
    {
    if (room_exists(room_previous(room))) and (room != menu_room)
        {
        room_goto(room_previous(room));
        mus_stop();
        }
    }

// resource scroll
if (debugMode == 3)
    {
    var vx = view_xview[0];
    var vy = view_yview[0];
    if (resourceMode == 1) and (result_select &gt; -1)
        {
        if (mouse_check_button_pressed(mb_left))
            {
            if ((resourceCollapse) and (!point_in_rectangle(mouse_x,mouse_y,vx+6,vy+6,vx+220,vy+3*12)))
            or ((!resourceCollapse) and (!point_in_rectangle(mouse_x,mouse_y,vx+6,vy+6,vx+262,vy+9*12))) 
                {
                if (object_exists(result_id[result_select]))
                    instance_create(mouse_x,mouse_y,result_id[result_select]);
                }
            }
        }
    if (!resourceCollapse)
        {
        var delta = mouse_wheel_down()-mouse_wheel_up();
        if (delta != 0)
            {
            result_slider[0] += delta*2*(1/(results-6));
            result_slider[0] = clamp(result_slider[0],0,1);
            }
        }
    }

// restart
if (keyboard_check_pressed(ord("R")))
and (!global.DEBUG)
    {
    mus_stop();
    with(obj_shader)
        instance_destroy();
    instance_destroy();
    game_restart()
    }

// end
if (keyboard_check_pressed(vk_escape))
    game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Index results

// clear previous results
results = 0;
result_id   = -1;
result_name = -1;
result_spr  = -1;

if (search == "")
    {
    // empty search, list all results
    if (resourceMode == 0)
        {
        // room results
        for(var i=0; i&lt;rooms; i++;)
            {
            result_id[i]   = rm_id[i];
            result_name[i] = rm_name[i];
            result_spr[i]  = -1;
            }
        results = rooms;
        }
    else if (resourceMode == 1)
        {
        // object results
        for(var i=0; i&lt;objects; i++;)
            {
            result_id[i]   = obj_id[i];
            result_name[i] = obj_name[i];
            result_spr[i]  = obj_spr[i];
            }
        results = objects;
        }
    }
else
    {
    // search results
    if (resourceMode == 0)
        {
        // search-indexed room results
        for(var i=0; i&lt;rooms; i++;)
            {
            if (string_pos(search,rm_name[i]) &gt; 0)
                {
                result_id[results]   = rm_id[i];
                result_name[results] = rm_name[i];
                result_spr[results]  = -1;
                results++;
                }
            }
        }
    else if (resourceMode == 1)
        {
        // search-indexed object results
        for(var i=0; i&lt;objects; i++;)
            {
            if (string_pos(search,obj_name[i]) &gt; 0)
                {
                result_id[results]   = obj_id[i];
                result_name[results] = obj_name[i];
                result_spr[results]  = obj_spr[i];
                results++;
                }
            }
        }
    }

result_select = -1;
result_scroll = 0;
result_slider[0] = 0;
result_slider[1] = sqrt(max(results-6,1));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Output OS info

var file = file_text_open_write(working_directory+"debug.txt");
file_text_write_string(file,"[OS]");
file_text_writeln(file);
file_text_write_string(file,string(val_to_text(4,os_type)));
file_text_writeln(file);
file_text_write_string(file,"[VERSION]");
file_text_writeln(file);
file_text_write_string(file,string(os_version));
file_text_writeln(file);

var info_map = os_get_info();
if (info_map &gt; -1)
    {
    var key = ds_map_find_first(info_map);
    while(key != undefined)
        {
        file_text_write_string(file,"["+string_upper(string(key))+"]");
        file_text_writeln(file);
        file_text_write_string(file,string_upper(string(info_map[?key])));
        file_text_writeln(file);
        
        key = ds_map_find_next(info_map,key);
        }
    }

file_text_close(file);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.DEBUG)
    {
    var vx = view_xview[0];
    var vy = view_yview[0];
    
    // smooth fps graph
    if (surface_exists(surf_graph))
        surface_set_target(surf_graph);
    else
        {
        surf_graph = surface_create(graph_w,graph_h);
        surface_set_target(surf_graph);
        draw_clear($000000);
        }
    
    // fade to black
    if (graph_ind &amp; 7 == 4)
        {
        draw_set_color($000000);
        draw_set_alpha(1/8);
        draw_rectangle(0,0,graph_w,graph_h,0);
        draw_set_alpha(1);
        }
    
    // draw current graph line
    draw_set_color($FFFFFF);
    draw_line(graph_ind,graph_h,graph_ind,graph_h-(max(0,1500-fps_avg[graph_ind mod 60])/3000)*graph_h);
    graph_ind++;
    if (graph_ind &gt; graph_w)
        graph_ind = 0;
    
    surface_reset_target();
    
    switch(debugMode)
        {
        case 0: // hitboxes
            draw_set_color(c_blue);
            with(par_actor)
                draw_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,1);
            draw_set_color(c_red);
            with(par_enemy)
                draw_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,1);
            draw_set_color(c_orange);
            with(par_projectile)
                draw_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,1);
            draw_set_color(c_fuchsia);
            with(par_collider)
                draw_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,1);
            draw_set_color(c_purple);
            with(par_reflector)
                {
                draw_line(rx1,ry1,rx2,ry2);
                draw_arrow((rx1+rx2)/2,(ry1+ry2)/2,(rx1+rx2)/2 + nx*16,(ry1+ry2)/2 + ny*16,8);
                }
            draw_set_color(c_yellow);
            with(par_trigger)
                {
                draw_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,1);
                if (active)
                    {
                    draw_set_alpha(0.5);
                    draw_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,0);
                    draw_set_alpha(1.0);
                    }
                }
            with(par_camera_flag)
                draw_self();
            //draw_set_color(c_lime);
            //with(par_verlet)
            //    draw_point(x,y);
            break;
        
        case 1: // simple
            draw_set_color($000000);
            draw_rectangle(vx+400-(graph_w+4+1),vy+4-1,vx+400-4,vy+4+graph_h,0);
            draw_surface(surf_graph,vx+400-(graph_w+4),vy+4);
            draw_set_halign(0);
            draw_set_valign(0);
            draw_text_outline((vx+400)-(graph_w+4),vy+4+graph_h+4,"FPS: "+string(round(avg_fps/fps_num)));
            break;
            
        case 2: // detailed
            var inst_num = 0;
            inst_num += instance_number(par_solid);
            inst_num += instance_number(par_jt);
            inst_num += instance_number(par_mb);
            inst_num += instance_number(par_actor);
            inst_num += instance_number(par_enemy);
            inst_num += instance_number(par_shootable);
            
            var proj_num = 0;
            proj_num += instance_number(par_projectile);
            
            var part_num = 0;
            part_num += instance_number(par_effect);
            
            draw_set_halign(0);
            draw_set_valign(0);
            draw_text_outline(vx+4,vy+4+00,"Version: BUILD["+string(global.BUILDversion)+"] CFG["+string(global.CFGversion)+"]");
            draw_text_outline(vx+4,vy+4+12,"Instances: "+string(inst_num));
            draw_text_outline(vx+4,vy+4+24,"Projectiles: "+string(proj_num));
            draw_text_outline(vx+4,vy+4+36,"Particles: "+string(part_num));
            draw_set_color($000000);
            draw_rectangle(vx+400-(graph_w+4+1),vy+4-1,vx+400-4,vy+4+graph_h,0);
            draw_surface(surf_graph,(vx+400)-(graph_w+4),vy+4);
            draw_text_outline((vx+400)-(graph_w+4),vy+4+graph_h+4,"FPS: "+string(round(avg_fps/fps_num)));
            
            // draw connected gamepads
            if (global.CFG[config.padType])
                var spr = spr_buttons_xbox;
            else
                var spr = spr_buttons_ps;
            for(var i=0; i&lt;global.gpcount; i++;)
                draw_sprite(spr,24,vx+4 + i*44,vy+216);
            break;
        
        case 3: // resource select
            if (resourceMode == 1) and (result_select &gt; -1)
                {
                if ((resourceCollapse) and (!point_in_rectangle(mouse_x,mouse_y,vx+6,vy+6,vx+220,vy+3*12)))
                or ((!resourceCollapse) and (!point_in_rectangle(mouse_x,mouse_y,vx+6,vy+6,vx+262,vy+9*12)))
                    {
                    var _x = ternary(keyboard_check(vk_shift),round_n(mouse_x,10),mouse_x);
                    var _y = ternary(keyboard_check(vk_shift),round_n(mouse_y,10),mouse_y);
                    
                    var _spr = result_spr[result_select];
                    if (_spr &gt; -1)
                        draw_sprite_ext(_spr,0,_x,_y,1,1,0,-1,0.75);
                    }
                }
            
            if (resourceCollapse)
                {
                // minimized resource list
                draw_set_color($000000);
                draw_set_alpha(0.75);
                draw_rectangle(vx+6,vy+6,vx+220,vy+3*12,0);
                draw_set_alpha(1.00);
                
                // minimized tab buttons
                if (button(vx+10+00,vy+8,64,14,"ROOMS",(resourceMode == 0)))
                    resourceMode = 0;
                if (button(vx+10+72,vy+8,64,14,"OBJECTS",(resourceMode == 1)))
                    resourceMode = 1;
                // maximize button
                if (button(vx+220-22,vy+8,16,14,"+"))
                    {
                    event_user(1);
                    resourceCollapse = false;
                    }
                
                var dy = 0;
                var dx = 10;
                if (resourceMode == 0)
                    draw_text_outline(vx+dx,vy+24+dy*12,room_get_name(room));
                else if (resourceMode == 1)
                    {
                    if (result_select &gt; -1)
                        {
                        var _spr = result_spr[result_select];
                        if (_spr &gt; -1)
                            {
                            dx += 22;
                            var _sw = sprite_get_width(_spr);
                            var _sh = sprite_get_height(_spr);
                            var _ox = sprite_get_xoffset(_spr);
                            var _oy = sprite_get_yoffset(_spr);
                            var _xs = 8/_sw;
                            var _ys = 8/_sh;
                            draw_sprite_ext(_spr,0,vx+12+(_ox*_xs),vy+26+(_oy*_ys)+dy*12,_xs,_ys,0,-1,1);
                            }
                        draw_text_outline(vx+dx,vy+24+dy*12,result_name[result_select]);
                        }
                    else
                        draw_text_outline(vx+dx,vy+24+dy*12,"No Object Selected");
                    }
                }
            else
                {
                // maximized resource list
                draw_set_color($000000);
                draw_set_alpha(0.75);
                draw_rectangle(vx+6,vy+6,vx+262,vy+6+9*12,0);
                draw_set_alpha(1.00);
                
                // tab buttons
                if (button(vx+10+00,vy+8,64,14,"ROOMS",(resourceMode == 0)))
                    {
                    resourceMode = 0;
                    event_user(1);
                    }
                if (button(vx+10+72,vy+8,64,14,"OBJECTS",(resourceMode == 1)))
                    {
                    resourceMode = 1;
                    event_user(1);
                    }
                // minimize button
                if (button(vx+262-22,vy+8,16,14,"-"))
                    resourceCollapse = true;
                
                // search box
                textbox(vx+10,vy+24,224,14,txt_search);
                if (search != txt_search[0])
                    {
                    search = txt_search[0];
                    event_user(1);
                    }
                
                var dy = 0;
                var dx = 10;
                // result list
                if (results &gt; 0)
                    {
                    for(var i=result_scroll; i&lt;min(result_scroll+6,results); i++;)
                        {
                        if (i == result_select)
                            {
                            draw_set_color($FFFFFF);
                            draw_set_alpha(0.75);
                            draw_rectangle(vx+6,vy+39+dy*12,vx+220,vy+50+dy*12,0);
                            draw_set_alpha(1.00);
                            }
                        
                        var dx = 10;
                        var _spr = result_spr[i];
                        if (_spr &gt; -1)
                            {
                            dx += 22;
                            var _sw = sprite_get_width(_spr);
                            var _sh = sprite_get_height(_spr);
                            var _ox = sprite_get_xoffset(_spr);
                            var _oy = sprite_get_yoffset(_spr);
                            var _xs = 8/_sw;
                            var _ys = 8/_sh;
                            draw_sprite_ext(_spr,0,vx+12+(_ox*_xs),vy+40+(_oy*_ys)+dy*12,_xs,_ys,0,-1,1);
                            }
                        if (point_in_rectangle(mouse_x,mouse_y,vx+6,vy+39+dy*12,vx+220,vy+50+dy*12))
                            {
                            draw_text_outline(vx+dx,vy+38+dy*12,result_name[i]);
                            if (mouse_check_button_pressed(mb_left))
                                {
                                result_select = i;
                                if (resourceMode == 0)
                                    room_goto(result_id[result_select]);
                                }
                            }
                        else
                            {
                            if (i == result_select)
                                draw_set_color($000000);
                            else
                                draw_set_color($CCCCCC);
                            
                            draw_text(vx+dx,vy+38+dy*12,result_name[i]);
                            }
                        dy++;
                        }
                    slider(vx+240,vy+25,vx+256,vy+9*12,result_slider);
                    result_scroll = clamp(round((results-6)*result_slider[0]),0,results-1);
                    }
                else
                    draw_text_outline(vx+dx,vy+38+dy*12,"No Results");
                }
            break;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
