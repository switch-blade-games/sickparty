<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>A_rolling_cutter_spr</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>par_actor_projectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
image_speed = 0;
image_angle = 0;

damage = 1;

xspeed = 0;
yspeed = 0;
xspd_f = 0;
yspd_f = 0;
roll_dir = 1;

// tuners
grav_speed = 0.4;
roll_speed = 6;
fall_speed = 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_index += (xspeed/22)*8; // 22 is the sprite's circumference

// horizontal sub-pixel speed calculations
var ax = abs(xspeed);
var sx = sign(xspeed);
var fx = floor(ax);
xspd_f += ax-fx;
if (xspd_f &gt;= 1)
    {
    var add = floor(xspd_f);
    xspd_f -= add;
    ax += add;
    fx += add;
    }
// horizontal collision detection/response
if (ax &gt; 0)
    {
    repeat(ax)
        {
        // move up slope
        if (place_meeting(x+sx,y,par_solid)) and (!place_meeting(x+sx,y-1,par_solid))
            y -= 1;
        
        if (!place_meeting(x+sx,y,par_solid))
            x += sx;
        else
            {
            instance_destroy();
            break;
            }
        }
    }

// vertical sub-pixel speed calculation
var ay = abs(yspeed);
var sy = sign(yspeed);
var fy = floor(ay);
yspd_f += ay-fy;
if (yspd_f &gt;= 1)
    {
    var add = floor(yspd_f);
    yspd_f -= add;
    ay += add;
    fy += add;
    }
// vertical collision detection/response
if (ay &gt; 0)
    {
    // moving upwards
    if (sy &lt; 0)
        {
        repeat(ay)
            {
            if (!place_meeting(x,y+sy,par_solid))
                y += sy;
            else
                {
                yspeed = 0;
                yspd_f = 0;
                break;
                }
            }
        }
    else if (sy &gt; 0) // moving downwards
        {
        repeat(ay)
            {
            if (!place_meeting(x,y+sy,par_solid))
            and (!((!position_meeting(x,bbox_bottom,par_jt)) and (position_meeting(x,bbox_bottom+1,par_jt))))
                y += sy;
            else
                {
                yspeed = 0;
                yspd_f = 0;
                break;
                }
            }
        }
    }

if (!place_meeting(x,y+1,par_solid))
and (!((yspeed &gt;= 0) and (!position_meeting(x,bbox_bottom,par_jt)) and (position_meeting(x,bbox_bottom+1,par_jt))))
    {
    if (yspeed &lt; fall_speed)
        yspeed += grav_speed;
    }
else
    {
    if ((roll_dir &gt; 0) and (xspeed &lt; roll_speed*roll_dir))
    or ((roll_dir &lt; 0) and (xspeed &gt; roll_speed*roll_dir))
        xspeed += 1*roll_dir;
    }

outside_view(240);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
