<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xstart = view_xview[0]+view_wview[0]/2;
ystart = view_yview[0]-view_hview[0]/2;
x = xstart;
y = ystart;
xto = x;
yto = view_yview[0]+view_hview[0]/2;

// states
DOWN = 0;
SPIN = 1;
IDLE = 2;

// state properties
SPINTIME = 150;
SPINDIR = 1;
IDLETIME = 75;
GROW = true;

// current state/timer
state = DOWN;
timer = 0;
laser = false;

// number of cams in each direction
// odd numbers only
x_num = 5;
y_num = 5;
x_mid = floor(x_num/2);
y_mid = floor(y_num/2);

// rotation of all cams
ang = 0;
// distance between cams
spread = 0;

// setup cams
cam[0,0] = 0;
for(var i=0; i&lt;x_num; i++;)
    {
    for(var j=0; j&lt;y_num; j++;)
        {
        var _x = (-x_mid+i)*spread;
        var _y = (-y_mid+j)*spread;
        var rx = _x*dcos(ang) - _y*dsin(ang);
        var ry = _x*dsin(ang) + _y*dcos(ang);
        cam[i,j] = instance_create(rx,ry,obj_cam_laser);
        }
    }

// link cams together
for(var i=0; i&lt;x_num; i++;)
    {
    for(var j=0; j&lt;y_num; j++;)
        {
        var inst = cam[i,j];
        if (i &gt; 0)
            inst.link[inst.links++] = cam[i-1,j];
        if (i &lt; x_num-1)
            inst.link[inst.links++] = cam[i+1,j];
        if (j &gt; 0)
            inst.link[inst.links++] = cam[i,j-1];
        if (j &lt; y_num-1)
            inst.link[inst.links++] = cam[i,j+1];
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(state)
    {
    case DOWN:
        if (y &lt; yto)
            y += 1;
        else
            {
            state = SPIN;
            timer = IDLETIME;
            y = yto;
            }
        break;
    
    case SPIN:
        if (timer &gt; 0)
            timer--;
        else
            {
            state = IDLE;
            timer = IDLETIME;
            }
        ang += 1*SPINDIR;
        spread += (64-spread)*0.05;
        break;
    
    case IDLE:
        if (timer &gt; 0)
            timer--;
        else
            {
            state = SPIN;
            timer = SPINTIME;
            if (random(1) &lt; 0.5)
                SPINDIR *= -1;
            }
        laser = !laser;
        break;
    }

// move cams
var _cos = dcos(ang);
var _sin = dsin(ang);
for(var i=0; i&lt;x_num; i++;)
    {
    for(var j=0; j&lt;y_num; j++;)
        {
        var _x = (-x_mid+i)*spread;
        var _y = (-y_mid+j)*spread;
        var rx = _x*_cos - _y*_sin;
        var ry = _x*_sin + _y*_cos;
        cam[i,j].x = x+rx;
        cam[i,j].y = y+ry;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (laser)
    {
    draw_set_color($0000FF);
    draw_set_alpha(0.4+random(0.2));
    for(var i=0; i&lt;x_num; i++;)
        {
        for(var j=0; j&lt;y_num; j++;)
            {
            var inst = cam[i,j];
            for(var k=0; k&lt;inst.links; k++;)
                {
                var link = inst.link[k];
                if (!instance_exists(link))
                    continue;
                
                draw_line_width(inst.x,inst.y,link.x,link.y,2);
                }
            }
        }
    draw_set_alpha(1);
    draw_set_color($000000);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
