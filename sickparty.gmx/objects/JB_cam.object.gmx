<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>cam_icon_spr</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000</depth>
  <persistent>0</persistent>
  <parentName>par_stay_active</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// don't deactivate instances outside view for two frames
deactivate_buffer = 2;

// camera states
enum camState
    {
    locked,
    free,
    jog
    }

// states and flags
if (room_width == 400) and (room_height = 240)
    {
    state = camState.locked;
    camera_set_axis();
    }
else
    {
    state = camState.free;
    camera_set_axis(true,false,false,false);
    camera_set_margin(180,120);
    }

// boundaries
bound_x = true;
bound_y = true;
bound_x1 = 0;
bound_y1 = 0;
bound_x2 = room_width;
bound_y2 = room_height;

// frame
frame_w = 400;
frame_h = 240;
frame_w_to = 400;
frame_h_to = 240;
frame_w_delta = 1;
frame_h_delta = 1;

// target
target_obj = par_actor;
target_x = 0;
target_y = 0;

jog_x = 0;
jog_y = 0;
jog_end_x = false;
jog_end_y = false;
jog_end_state = camState.locked;
jog_end_script = -1;
jog_end_args = -1;

if (instance_exists(par_actor)) and (state != camState.locked)
    {
    x = par_actor.x;
    y = par_actor.y;
    }

// audio listener
audio_falloff_set_model(audio_falloff_exponent_distance);
audio_listener_position(x,y,0);
audio_listener_orientation(x,y,1000,0,-1,0);
audio_listener_velocity(0,0,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// deactivate objects
if (deactivate_buffer &gt; 0)
    deactivate_buffer--;
else
    camera_deactivate(100);

// focus on a target object
if (state == camState.free)
    {
    if (instance_exists(target_obj))
        {
        var xmin = +9999; var ymin = +9999;
        var xmax = -9999; var ymax = -9999;
        with(target_obj)
            {
            if (x &lt; xmin)
                xmin = x;
            if (x &gt; xmax)
                xmax = x;
            if (y &lt; ymin)
                ymin = y;
            if (y &gt; ymax)
                ymax = y;
            }
        target_x = round((xmin+xmax)/2);
        target_y = round((ymin+ymax)/2);
        }
    }

// finite state machine
switch(state)
    {
    case camState.free:
        if (axis == 0)
            break;
        
        if ((axis &amp; 1) == 1) and (target_x &gt; x+margin_x) // right
            x += xspeed;
        if ((axis &amp; 2) == 2) and (target_y &lt; y-margin_y) // up
            y -= yspeed;
        if ((axis &amp; 4) == 4) and (target_x &lt; x-margin_x) // left
            x -= xspeed;
        if ((axis &amp; 8) == 8) and (target_y &gt; y+margin_y) // down
            y += yspeed;
        break;
    
    case camState.jog:
        if (axis == 0)
            break;
        
        if ((axis &amp; 1) == 1) and (x &lt; jog_x) // right
            {
            x += xspeed;
            if (x &gt;= jog_x)
                {
                x = jog_x;
                axis -= 1;
                jog_end_x = true;
                }
            }
        if ((axis &amp; 2) == 2) and (y &gt; jog_y) // up
            {
            y -= yspeed;
            if (y &lt;= jog_y)
                {
                y = jog_y;
                axis -= 2;
                jog_end_y = true;
                }
            }
        if ((axis &amp; 4) == 4) and (x &gt; jog_x) // left
            {
            x -= xspeed;
            if (x &lt;= jog_x)
                {
                x = jog_x;
                axis -= 4;
                jog_end_x = true;
                }
            }
        if ((axis &amp; 8) == 8) and (y &lt; jog_y) // down
            {
            y += yspeed;
            if (y &gt;= jog_y)
                {
                y = jog_y;
                axis -= 8;
                jog_end_y = true;
                }
            }
        if (jog_end_x) and (jog_end_y)
            {
            state = jog_end_state;
            if (script_exists(jog_end_script))
                script_execute(jog_end_script,jog_end_args);
            jog_end_state = camState.locked;
            jog_end_script = -1;
            jog_end_args = -1;
            }
        break;
    }

// boundaries
if (bound_x)
    x = clamp(x,bound_x1 + view_wview[0]/2,bound_x2 - view_wview[0]/2);
if (bound_y)
    y = clamp(y,bound_y1 + view_hview[0]/2,bound_y2 - view_hview[0]/2);

// frame
if (frame_w_to &gt; frame_w)
    frame_w = min(frame_w+frame_w_delta,frame_w_to);
if (frame_w_to &lt; frame_w)
    frame_w = max(frame_w-frame_w_delta,frame_w_to);
if (frame_h_to &gt; frame_h)
    frame_h = min(frame_h+frame_h_delta,frame_h_to);
if (frame_h_to &lt; frame_h)
    frame_h = max(frame_h-frame_h_delta,frame_h_to);
view_wview[0] = round(frame_w);
view_hview[0] = round(frame_h);

// apply screenshake/nudge
var vx = x - round(frame_w/2);
var vy = y - round(frame_h/2);
vx += global.xnudge;
vy += global.ynudge;
if (global.xshake &gt; 1)
    vx += random_range(-global.xshake,global.xshake);
if (global.yshake &gt; 1)
    vy += random_range(-global.yshake,global.yshake);

// move the view and round it
view_xview[0] = round(vx);
view_yview[0] = round(vy);

// decay screenshake values
global.xnudge *= 0.8;
global.ynudge *= 0.8;
global.xshake *= 0.8;
global.yshake *= 0.8;

// move audio listener to camera position
audio_listener_position(x,y,0);
audio_listener_orientation(x,y,1000,0,-1,0);
audio_listener_velocity(0,0,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DRAW HUD

if (!instance_exists(par_actor))
or ((instance_exists(dev_cheater)) and (global.DEBUG))
    exit;

// player 1
draw_sprite(HUD_player_icon,obj_player.skin_id,0,0);
draw_set_halign(fa_left);
draw_set_color(WHITE);
draw_text(25,2,"="+string(global.P1LIVES));

exit

// weapons
for(var i=0; i&lt;obj_player.weapons; i++;)
    {
    draw_sprite(HUD_weapon_bg,i,40 + i*20,0)
    draw_sprite(HUD_weapon_icon,i,40 + i*20,0)
    }
draw_sprite(HUD_weapon_select,-1,40 + obj_player.cur_weapon*20,0);

draw_set_halign(fa_center);
draw_set_valign(fa_top);
draw_text_transformed(200,-6,"100%",2,2,0);
draw_set_valign(0);
draw_set_halign(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (BUFFER)
    {
    draw_set_color(DARKpurple);
    draw_rectangle(view_xview[0]-20,view_yview[0]-20,view_xview[0]+400+20,view_yview[0]+240+20,0);
    draw_set_color(c_white);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
