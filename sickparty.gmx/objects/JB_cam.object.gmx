<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>cam_icon_spr</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000</depth>
  <persistent>0</persistent>
  <parentName>par_stay_active</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// camera states
enum camState
    {
    free,
    right,
    diag_u,
    up,
    down,
    diag_d,
    jog_u,
    jog_r,
    jog_d,
    jog_r_player,
    right_dead,
    locked
    }

// target
target_obj = par_actor;
target_x = 0;
target_y = 0;
cam_x = 0;
cam_y = 0;

BUFFER = true;
alarm[0] = 2;

Ycurrent = 0;
Ydist = 0;
// movement speeds
JOGspe = 2;
DJOGspe = 10;
RJOGx=0;

switch(room)
    {
    case final_factory:
        MYarray[0] = 1440;
        MYarray[1] = 1280;
        MYarray[2] = 2660;
        break;
    case clown_room:
        MYarray[0] = 19600;
        break;
    case pooh_stage:
        MYarray[0] = 240;
        break;
    case comix_zone_room:
        MYarray[0] = 520;
        break;
    default:
        MYarray[0] = 0;
        if (instance_exists(target_obj))
            MYarray[0] = max(0,target_obj.y-140);
        break;
    }
cam_y = MYarray[Ycurrent];
if (instance_exists(target_obj))
    cam_x = target_obj.x;

// initial states
if (room_width == 400) and (room_height = 240)
    state = camState.locked;
else
    state = camState.right;

// audio listener
var ear_x = view_xview[0]+view_wview[0]/2;
var ear_y = view_yview[0]+view_hview[0]/2;
audio_falloff_set_model(audio_falloff_exponent_distance);
audio_listener_position(ear_x,ear_y,0);
audio_listener_orientation(ear_x,ear_y,1000,0,-1,0);
audio_listener_velocity(0,0,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>BUFFER = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// deactivate objects
if (!BUFFER)
    camera_deactivate(100);

// focus on a target object
if (instance_exists(target_obj))
    {
    var xmin = +9999; var ymin = +9999;
    var xmax = -9999; var ymax = -9999;
    with(target_obj)
        {
        if (x &lt; xmin)
            xmin = x;
        if (x &gt; xmax)
            xmax = x;
        if (y &lt; ymin)
            ymin = y;
        if (y &gt; ymax)
            ymax = y;
        }
    target_x = round((xmin+xmax)/2);
    target_y = round((ymin+ymax)/2);
    }

// finite state machine
switch(state)
    {
    case camState.free:
        cam_x = target_x-180;
        cam_y = target_y-140;
        break;
    
    case camState.right:
        Rfollow(180);
        cam_y = MYarray[Ycurrent];
        break;

    case camState.diag_u:
        Rfollow(180);
        Yfollow(120);
        break;

    case camState.jog_u:
        Rfollow(180);
        cam_y -= JOGspe;
        if (cam_y &lt;= MYarray[Ycurrent])
            {
            state = camState.right;
            cam_y = MYarray[Ycurrent];
            }
        break;

    case camState.jog_r:
        cam_x += JOGspe;
        if (cam_x &gt;= RJOGx)
            {
            state = camState.locked;
            cam_x = RJOGx;
            
            if (room == final_factory)
                {
                with(moloch_lady)
                    {
                    state = SURPRISE;
                    alarm[1] = SURPRISEtime;
                    }
                with(cat)
                    state = JUMP;
                }
            }
        cam_y = MYarray[Ycurrent];
        break;
    
    case camState.jog_d:
        cam_y += DJOGspe;
        if (cam_y &gt;= target_y-120)
            {
            state = camState.down;
            cam_y = target_y-120;
            }
        break;

    case camState.down:
        if (cam_y &lt; target_y-120)
            cam_y = target_y-120;
        break;
        
    case camState.up:
        if (cam_y &gt; target_y-140)
            cam_y = target_y-140;
        break;
    
    case camState.jog_r_player:
        cam_x += JOGspe;
        if (cam_x &gt;= target_x-180)
            {
            state = camState.right;
            cam_x = target_x-180;
            }
        cam_y = MYarray[Ycurrent];
        break;
    
    case camState.right_dead:
        if (target_x &gt; view_xview[0]+180)
            state = camState.right;
        cam_y = MYarray[Ycurrent];
        break;
    
    case camState.locked:
        cam_x = x;
        cam_y = y;
        break;
    }

x = round(cam_x);
y = round(cam_y);
    
// apply screenshake/nudge
var cx = x+global.xnudge;
var cy = y+global.ynudge;
if (global.xshake &gt; 1)
    cx += random_range(-global.xshake,global.xshake);
if (global.yshake &gt; 1)
    cy += random_range(-global.yshake,global.yshake);

// move the view and round it
view_xview[0] += (cx-view_xview[0])*0.25;
view_yview[0] += (cy-view_yview[0])*0.25;
view_xview[0] = round(view_xview[0]);
view_yview[0] = round(view_yview[0]);

// decay screenshake values
global.xnudge *= 0.8;
global.ynudge *= 0.8;
global.xshake *= 0.8;
global.yshake *= 0.8;

// move audio listener to camera position
var ear_x = view_xview[0]+view_wview[0]/2;
var ear_y = view_yview[0]+view_hview[0]/2;
audio_listener_position(ear_x,ear_y,0);
audio_listener_orientation(ear_x,ear_y,1000,0,-1,0);
audio_listener_velocity(0,0,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DRAW HUD

if (!instance_exists(par_actor))
or ((instance_exists(dev_cheater)) and (global.DEBUG))
    exit;

// player 1
draw_sprite(HUD_player_icon,obj_player.skin_id,0,0);
draw_set_halign(fa_left);
draw_set_color(WHITE);
draw_text(25,2,"="+string(global.P1LIVES));

// weapons
for(var i=0; i&lt;obj_player.weapons; i++;)
    {
    draw_sprite(HUD_weapon_bg,i,40 + i*20,0)
    draw_sprite(HUD_weapon_icon,i,40 + i*20,0)
    }
draw_sprite(HUD_weapon_select,-1,40 + obj_player.cur_weapon*20,0);

draw_set_halign(fa_center);
draw_set_valign(fa_top);
draw_text_transformed(200,-6,"100%",2,2,0);
draw_set_valign(0);
draw_set_halign(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (BUFFER)
    {
    draw_set_color(DARKpurple);
    draw_rectangle(view_xview[0]-20,view_yview[0]-20,view_xview[0]+400+20,view_yview[0]+240+20,0);
    draw_set_color(c_white);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
