<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mode = 0;
surf = -1;

surf_w = 420;
surf_h = 260;

event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (mouse_check_button_pressed(mb_left))
    {
    mode--;
    if (mode &lt; 0)
        mode = scenes;
    event_user(0);
    }
if (mouse_check_button_pressed(mb_right))
    {
    mode++;
    if (mode &gt; scenes)
        mode = 0;
    event_user(0);
    }

if (!surface_exists(surf))
    surf = surface_create(surf_w,surf_h);

switch(mode)
    {
    case 0: // red bg with white blocks
        surface_set_target(surf);
        draw_clear($2C55B7);
        
        draw_primitive_begin(pr_trianglelist);
        for(var i=0; i&lt;white_squares; i++;)
            {
            var sx = white_square_x[i];
            var sy = white_square_y[i];
            var ang = white_square_ang[i];
            var scl = white_square_scl[i];
            var a   = white_square_a[i];
            var ldx1 = lengthdir_x(scl,ang);
            var ldy1 = lengthdir_y(scl,ang);
            var ldx2 = lengthdir_x(scl,ang+90);
            var ldy2 = lengthdir_y(scl,ang+90);
            
            draw_vertex_color(sx+ldx2*1.1,sy+ldy2*1.1,$0A2BAF,a);
            draw_vertex_color(sx-ldx2*1.1,sy-ldy2*1.1,$0A2BAF,a);
            draw_vertex_color(sx+ldx1*1.1,sy+ldy1*1.1,$0A2BAF,a);
            draw_vertex_color(sx-ldx2*1.1,sy-ldy2*1.1,$0A2BAF,a);
            draw_vertex_color(sx+ldx2*1.1,sy+ldy2*1.1,$0A2BAF,a);
            draw_vertex_color(sx-ldx1*1.1,sy-ldy1*1.1,$0A2BAF,a);
            
            draw_vertex_color(sx+ldx2,sy+ldy2,$FFFFFF,a);
            draw_vertex_color(sx-ldx2,sy-ldy2,$FFFFFF,a);
            draw_vertex_color(sx+ldx1,sy+ldy1,$FFFFFF,a);
            draw_vertex_color(sx-ldx2,sy-ldy2,$FFFFFF,a);
            draw_vertex_color(sx+ldx2,sy+ldy2,$FFFFFF,a);
            draw_vertex_color(sx-ldx1,sy-ldy1,$FFFFFF,a);
        
            white_square_ang[i] += white_square_rot[i];
            white_square_x[i] += lengthdir_x(white_square_spd[i],white_square_dir[i]);
            white_square_y[i] += lengthdir_y(white_square_spd[i],white_square_dir[i]);
            
            if (white_square_x[i] &gt; surf_w+64)
                {
                white_square_x[i] = -128+random(64);
                white_square_y[i] = random_range(64,surf_h-64);
                white_square_ang[i] = random(360);
                white_square_scl[i] = 40+random(20);
                white_square_rot[i] = random_range(-4,4);
                white_square_spd[i] = random_range(4,7);
                white_square_dir[i] = random_range(-16,4);
                white_square_a[i] = random_range(0.4,0.6);
                }
            }
        draw_primitive_end();
        
        surface_reset_target();
        break;
    
    case 1: // red/blue square
        if (red_blue_time &gt; 0)
            red_blue_time--;
        else
            {
            red_blue_time = 6;
            red_blue_swap = !red_blue_swap;
            red_blue_bgcol = merge_color($FFFFFF,$000000,0.1+random(0.05))
            }
        
        surface_set_target(surf);
        draw_clear(red_blue_bgcol);
        
        if (red_blue_swap) // red
            {
            draw_set_color($0000FF);
            draw_set_alpha(red_square_a);
            draw_rectangle(red_square_x1,red_square_y1,red_square_x2,red_square_y2,0);
            
            red_square_x1 += (0-red_square_x1)*random(0.05);
            red_square_y1 += (0-red_square_y1)*random(0.05);
            red_square_x2 += (surf_w-red_square_x2)*random(0.05);
            red_square_y2 += (surf_h-red_square_y2)*random(0.05);
            }
        else
            {
            draw_set_color($FF0000);
            draw_set_alpha(blue_square_a);
            draw_rectangle(blue_square_x1,blue_square_y1,blue_square_x2,blue_square_y2,0);
            
            blue_square_x1 += (0-blue_square_x1)*random(0.05);
            blue_square_y1 += (0-blue_square_y1)*random(0.05);
            blue_square_x2 += (surf_w-blue_square_x2)*random(0.05);
            blue_square_y2 += (surf_h-blue_square_y2)*random(0.05);
            }
        surface_reset_target();
        
        draw_set_color($FFFFFF);
        draw_set_alpha(1);
        break;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// RESET SCENES

scenes = -1;

// SCENE 0 - white squares
scenes++;
white_squares = 6;
for(var i=white_squares-1; i&gt;=0; i--;)
    {
    white_square_x[i] = -128+random(64);
    white_square_y[i] = random_range(64,surf_h-64);
    white_square_ang[i] = random(360);
    white_square_scl[i] = 40+random(20);
    white_square_rot[i] = random_range(-4,4);
    white_square_spd[i] = random_range(4,7);
    white_square_dir[i] = random_range(-16,4);
    white_square_a[i] = random_range(0.4,0.6);
    }

// SCENE 2 - red/blue square + ball in 4 corners
scenes++;
red_square_a = 0;
var _x = irandom_range(60,surf_w/2 - 60);
var _y = irandom_range(60,surf_h/2 - 60);
var _scl = 8+random(8);
red_square_x1 = _x-_scl;
red_square_y1 = _y-_scl;
red_square_x2 = _x+_scl;
red_square_y2 = _x+_scl;
red_square_a = 0.75;
var _x = irandom_range(surf_w/2 + 60,surf_w - 60);
var _y = irandom_range(surf_h/2 + 60,surf_h - 60);
var _scl = 8+random(8);
blue_square_x1 = _x-_scl;
blue_square_y1 = _y-_scl;
blue_square_x2 = _x+_scl;
blue_square_y2 = _x+_scl;
blue_square_a = 0.75;
red_blue_swap = true;
red_blue_time = 6;
red_blue_bgcol = merge_color($FFFFFF,$000000,0.1+random(0.05));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (surface_exists(surf))
    draw_surface(surf,-10,-10);

draw_text_outline(4,4,"SCENE: "+string(mode));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
