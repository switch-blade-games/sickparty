<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>AA_rolling_stone_spr</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>par_actor_projectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
image_speed = 0;
image_angle = 0;
image_xscale = 0.1;
image_yscale = 0.1;

// damage
damage = 1;
max_damage = 5;
destroy_on_contact = false;

// speed
xspeed = 0;
yspeed = 0;
xspd_f = 0;
yspd_f = 0;

// rolling/size
roll_ang = 0;
roll_dir = 1;
roll_cir = 2*pi*((sprite_width-7)/2); // circumference = 2*pi*rad
cur_size = 0.1;
max_size = 1;

// tuners
grav_speed = 0.3;

//exit muzzle veolocity in the weapons states under weapon_pspd
roll_speed = 3; // max roll speed


fall_speed = 4; // max fall speed
grow_speed = 0.03; // scale grow rate
roll_delta = 0.01; // acceleration/deceleration rate

explode_num = 5; // number of explosions
explode_rad = 6; // radial range
explode_dam = 3; // explosion damage
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// image_index += xspeed/(roll_cir*cur_size);
roll_ang += (360/(roll_cir*cur_size))*(xspeed/60);

// grow
if (cur_size &lt; max_size)
    {
    cur_size += grow_speed;
    image_xscale = cur_size;
    image_yscale = cur_size;
    while(place_meeting(x,y,par_solid))
        y--;
    }

// horizontal sub-pixel speed calculations
var ax = abs(xspeed);
var sx = sign(xspeed);
var fx = floor(ax);
xspd_f += ax-fx;
if (xspd_f &gt;= 1)
    {
    var add = floor(xspd_f);
    xspd_f -= add;
    ax += add;
    fx += add;
    }
// horizontal collision detection/response
if (ax &gt; 0)
    {
    repeat(ax)
        {
        // move up slope
        if (place_meeting(x+sx,y,par_solid)) and (!place_meeting(x+sx,y-1,par_solid))
            y -= 1;
        
        if (!place_meeting(x+sx,y,par_solid))
            x += sx;
        else
            {
            instance_destroy();
            break;
            }
        }
    }

// vertical sub-pixel speed calculation
var ay = abs(yspeed);
var sy = sign(yspeed);
var fy = floor(ay);
yspd_f += ay-fy;
if (yspd_f &gt;= 1)
    {
    var add = floor(yspd_f);
    yspd_f -= add;
    ay += add;
    fy += add;
    }
// vertical collision detection/response
if (ay &gt; 0)
    {
    // moving upwards
    if (sy &lt; 0)
        {
        repeat(ay)
            {
            if (!place_meeting(x,y+sy,par_solid))
                y += sy;
            else
                {
                yspeed = 0;
                yspd_f = 0;
                break;
                }
            }
        }
    else if (sy &gt; 0) // moving downwards
        {
        repeat(ay)
            {
            if (!place_meeting(x,y+sy,par_solid))
            and (!((!position_meeting(x,bbox_bottom,par_jt)) and (position_meeting(x,bbox_bottom+1,par_jt))))
                y += sy;
            else
                {
                yspeed = 0;
                yspd_f = 0;
                break;
                }
            }
        }
    }

if (!place_meeting(x,y+1,par_solid))
and (!((yspeed &gt;= 0) and (!position_meeting(x,bbox_bottom,par_jt)) and (position_meeting(x,bbox_bottom+1,par_jt))))
    {
    if (yspeed &lt; fall_speed)
        yspeed += grav_speed;
    }
else
    {
    if (abs(xspeed) &lt; roll_speed)
        xspeed += roll_delta*roll_dir;
    else if (abs(xspeed) &gt; roll_speed)
        xspeed -= roll_delta*roll_dir;
    }

outside_view(240);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,roll_ang,image_blend,image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
