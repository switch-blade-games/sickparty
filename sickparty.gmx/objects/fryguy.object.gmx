<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>fryguy_sit_spr</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>4</depth>
  <persistent>0</persistent>
  <parentName>par_active_enemy</parentName>
  <maskName>fry_guy_mask_spr</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>enemy_init(1000);

controller = noone;
cx = 0;
cy = 0;
if (instance_exists(fryguy_controller))
    {
    controller = fryguy_controller;
    cx = controller.x;
    cy = controller.y;
    }

// various states

// sitting is the default
SIT=1

// for STAND attack
// fryguy jumps out of furance, performs attack, then jumps back in
JUMP=2
STAND=3
STANDfinish=4
JUMPback=5

JUMPwait=14
JUMPwaitbuffer=15

//for EAT attack
//fryguy eats a bunch of babies, shoots out flames, closes door, flames fall, then door reopens
EAT=6
CHEW=7
SPIT=8
PREslam=9
REACH=10
SLAM=11
DOORwait=12
LIFT=13
DEAD=-1;

JUMPspe=2
JUMPgrav=0.1
JUMPbackspe=3

// where to land on the floor
STANDy = cy+110
SITy = cy+80

// times for attack
STANDtime=1000
SITtime=60

//time of EAT attack (moved over to eat_attack_controller
EATattacktime=800
EATtime=120
EATimgspe=0.2
EATwatch=false
CHEWtime=60
SPITtime=120
SPITrate=6
SPITnoise=3
SPITrange=60
TEMPspit=false

PREslamtime=60

RINGflamespe=1.5

ARMx=60
ARMy=30

state = SIT;
alarm[0] = SITtime;
ATTACK = irandom(2);
attack_list = ds_list_create();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(L_fry_arm)
    instance_destroy();
with(fry_arm)
    instance_destroy();
with(arm_ball)
    instance_destroy();
with(floor_flame)
    instance_destroy();
with(flame_boy)
    instance_destroy();
with(flame_bullet)
    instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// TEMP SPIT

TEMPspit = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// FINISH STAND ATTACK

state = JUMPback;

with(fry_arm)
    instance_destroy();
with(L_fry_arm)
    instance_destroy();
with(arm_ball)
    instance_destroy();
with(ghost_rope)
    instance_destroy();
motion_set(90,JUMPbackspe);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// OPEN OVEN DOOR

state = LIFT;

// cclean up eat attack
with(eat_attack_controller)
    instance_destroy();
// tell oven door to move up
with(oven_door)
    {
    state = UP;
    motion_set(90,UPspe);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CLOSE OVEN DOOR

state = REACH;

instance_create(cx+200,cy,oven_door);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// PRE SLAM

state = PREslam;
alarm[6] = PREslamtime;

for(var i=0; i&lt;8; i++;)
    {
    var inst = instance_create(x,y,dir_flame);
    inst.direction = i*45;
    inst.speed = RINGflamespe;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// SPIT FLAMES UP

if (state != SPIT)
    exit;

alarm[4] = SPITrate+irandom(SPITnoise);

// create flames
var inst = instance_create(x,y+20,spit_flame);
inst.direction = 90+random_range(-SPITrange,+SPITrange);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// SPIT START

state = SPIT;
alarm[4] = 1;
alarm[5] = SPITtime;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CHEW

state = CHEW;
alarm[3] = CHEWtime;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// JUMP WAIT

state = JUMPwait;

with(floor_flame)
    instance_destroy();
with(fryguy_stand_controller)
    instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// ATTACK QUEUE

if (state == DEAD) or (!instance_exists(controller))
    exit;

// if queue is empty, queue some attacks
var _list = controller.attack_list;
if (ds_list_empty(_list))
    {
    for(var i=0; i&lt;3; i++;)
        _list[|i] = i;
    ds_list_shuffle(_list);
    }
// pull from attack queue
ATTACK = _list[|0];
ds_list_delete(_list,0);

// attack states
switch(ATTACK)
    {
    case 0: // stand attack
        var pre_state = state;
        state = JUMP;
        log("STAND ATTACK","STATE: "+string(pre_state),"NEW STATE: "+string(state));
        motion_set(90,JUMPspe);
        //make ghost ropes
        instance_create(cx+000,cy+100,ghost_rope);
        instance_create(cx+300,cy+100,ghost_rope);
        break;
    case 1: // eat attack
        var pre_state = state;
        state = EAT;
        log("EAT ATTACK","STATE: "+string(pre_state),"NEW STATE: "+string(state));
        alarm[2] = EATtime;
        break;
    case 2: // light attack
        var pre_state = state;
        state = DEAD;
        log("LIGHT ATTACK","STATE: "+string(pre_state),"NEW STATE: "+string(state));
        instance_create(x,y,fryguy_light_2);
        instance_destroy();
        break;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// DEAD
if (life &lt;= 0)
    {
    instance_destroy();
    for(var i=0; i&lt;10; i++;)
        alarm[i] = -1;
    state = DEAD;
    exit;
    }

//jump, and land on the ground to start STAND attack
switch(state)
    {
    case JUMP: // jump then start stand attack
        motion_add(270,JUMPgrav);
        if (y &gt;= STANDy)
            {
            // state changes
            state = STAND;
            alarm[1] = STANDtime;
            // position changes
            y = STANDy;
            speed = 0;
            
            // controller
            instance_create(0,0,fryguy_stand_controller);
            // left floor flames
            var inst = instance_create(cx+190,cy+200,floor_flame);
            with(inst)
                {
                DIR = 180;
                event_perform(ev_create,0);
                }
            // right floor flames
            var inst = instance_create(cx+210,cy+200,floor_flame);
            with(inst)
                {
                DIR = 0;
                event_perform(ev_create,0);
                }
            // right arm
            instance_create(x+ARMx,y+ARMy,fry_arm);
            // left arm
            instance_create(x-ARMx,y+ARMy,L_fry_arm);
            
            // screenshake
            global.ynudge += 4;
            global.xshake += 2;
            global.yshake += 2;
            }
        break;
    
    case JUMPback: // jump back into furnace
        motion_add(270,JUMPgrav);
        if (vspeed &gt; 0) and (y &gt;= SITy)
            {
            // state changes
            state = SIT;
            alarm[0] = SITtime;
            // position changes
            speed = 0;
            y = SITy;
            
            // screenshake
            global.ynudge += 2;
            global.xshake += 4;
            global.yshake += 4;
            }
        break;
    
    case JUMPwait:
        if  (!instance_exists(fry_blob))
        and (!instance_exists(drop_flame))
        and (!instance_exists(ground_flame_shot))
        and (!instance_exists(fry_maker))
        and (!instance_exists(L_fry_maker))
        and (!instance_exists(fry_flame_maker))
        and (!instance_exists(fry_flame))
        and (!instance_exists(pre_v_bounce))
        and (!instance_exists(H_fry_flame))
        and (!instance_exists(fry_bounce))
            {
            // state changes
            state = JUMPwaitbuffer;
            alarm[8] = 30;
            }
        break;
    }

// check if we can eat attack
if (ATTACK == 1)
    {
    if (EATwatch) and (!instance_exists(flame_boy))
        {
        EATwatch = false;
        alarm[7] = 10;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// regulate image_speed, will expand later

if (state == EAT)
    image_speed = EATimgspe;
else
    image_speed = 0;

// assign sprite based on state
switch(state)
    {
    case SIT:
    case DOORwait:
    case PREslam:
        sprite_index = fryguy_sit_spr;
        break;
    case JUMP:
    case JUMPback:
        sprite_index=fryguy_jump_spr;
        break;
    case STAND:
    case JUMPwait:
    case JUMPwaitbuffer:
        sprite_index = fryguy_stand_spr;
        break;
    case EAT:
        sprite_index = fryguy_eat_spr;
        break;
    case CHEW:
        sprite_index = fryguy_chew_spr;
        break;
    case REACH:
    case LIFT:
        sprite_index = fryguy_reach_spr;
        break;
    case SPIT:
        sprite_index = fryguy_spit_spr;
        break;
    }

if (TEMPspit)
    sprite_index = fryguy_spit_spr;

draw_enemy_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
