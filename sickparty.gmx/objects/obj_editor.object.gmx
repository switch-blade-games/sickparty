<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
global.version = 2;
global.levelname = "Untitled";

// view/display/gui setup
view_wview[0] = 800;
view_hview[0] = 480;
window_set_size(view_wview[0],view_hview[0]);
window_set_position(display_get_width()/2-view_wview[0]/2,display_get_height()/2-view_hview[0]/2);
surface_resize(application_surface,view_wview[0],view_hview[0]);
gui_w = view_wview[0];
gui_h = view_hview[0];
display_set_gui_size(gui_w,gui_h);

// edit mode
last = 0;
mode = 0;
oldmode = mode;
action = -1;
edit_vx = 0;
edit_vy = 0;

// collider info
colliders = 0;
collider[colliders] = obj_wall;
collider_name[colliders++] = "Wall";
collider[colliders] = obj_wall_half;
collider_name[colliders++] = "1/2 Wall";
collider[colliders] = obj_jt;
collider_name[colliders++] = "Jump-Thru";
collider[colliders] = obj_ramp_r;
collider_name[colliders++] = "Ramp R";
collider[colliders] = obj_ramp_l;
collider_name[colliders++] = "Ramp L";
collider[colliders] = obj_ramp_half_r;
collider_name[colliders++] = "1/2 Ramp R";
collider[colliders] = obj_ramp_half_l;
collider_name[colliders++] = "1/2 Ramp L";
collider[colliders] = obj_climb_r;
collider_name[colliders++] = "Climb R";
collider[colliders] = obj_climb_l;
collider_name[colliders++] = "Climb L";
collider[colliders] = obj_mb;
collider_name[colliders++] = "Monkeybar";
collider[colliders] = obj_mb_r;
collider_name[colliders++] = "Monkeybar R";
collider[colliders] = obj_mb_l;
collider_name[colliders++] = "Monkeybar L";
// collider select
cselect = 0;
cscroll = 0;
cupdate = false;
collide_map = ds_map_create();

// tile sheet select
tselect = 0;
tileset[0] = til_tiles_area1;
bgcolor[0] = $CAC26D;
tileset[1] = til_tiles_area1;
bgcolor[1] = $304C85;
tileset[2] = til_tiles_area1;
bgcolor[2] = $6D3430;
// tile region select
tclickx1 = 0;
tclicky1 = 0;
tclickx2 = 0;
tclicky2 = 0;
tselectx = 0;
tselecty = 0;
tselectw = 1;
tselecth = 1;
tselectg = false;
tscroll = 0;
tupdate = false;
// tile layer info
layers = 7;
for(var i=0; i&lt;layers; i++;)
    {
    layer_count[i] = 0;
    layer_depth[i] = 15 - i*5;
    }
// tile layer select
layer = 3;
oldlayer = layer;
lslidex = 0;
lslidew = 100;
lslideb = 10;
lslidev = 0.5;
lslideg = false;

// system info
systems = 0;
system[systems] = obj_player_spawn;
system_name[systems++] = "Player Spawn";
system[systems] = obj_camera_path;
system_name[systems++] = "Camera Path";
// system select
scamera = 15;
sselect = 0;
sscroll = 0;
supdate = false;
system_map = ds_map_create();

// entity info
entities = 0;
//entity[entities] = obj_target;
//entity_name[entities++] = "Target";
// game object select
eselect = 0;
escroll = 0;
eupdate = false;
entity_map = ds_map_create();

// grid
grid = true;
gridw = 32;
gridh = 32;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*

switch(mode)
    {
    case -1: // playtest
        if (!keyboard_check(vk_control)
        and keyboard_check_pressed(ord("P")))
            editor_edit();
        break;
    case 0: // colliders
        if (mouse_wheel_up())
            cscroll = max(0,cscroll-1);
        if (mouse_wheel_down())
            cscroll = min(cscroll+1,colliders-8);
        
        if (device_mouse_x_to_gui(0) &gt; 128)
        and (device_mouse_y_to_gui(0) &gt; 64)
            {
            if (keyboard_check(vk_alt))
                {
                var mx = floor(mouse_x/10)*10;
                var my = floor(mouse_y/10)*10;
                }
            else
                {
                var mx = floor(mouse_x/20)*20;
                var my = floor(mouse_y/20)*20;
                }
            
            // add colliders
            if (mouse_check_button(mb_left))
                {
                if (!ds_map_exists(collide_map,string(mx)+":"+string(my)))
                    {
                    var inst = instance_create(mx,my,collider[cselect]);
                    inst.visible = true;
                    
                    ds_map_add(collide_map,string(mx)+":"+string(my),inst);
                    }
                }
            
            // delete colliders
            if (mouse_check_button(mb_right))
                {
                if (ds_map_exists(collide_map,string(mx)+":"+string(my)))
                    {
                    with(ds_map_find_value(collide_map,string(mx)+":"+string(my)))
                        instance_destroy();
                    
                    ds_map_delete(collide_map,string(mx)+":"+string(my));
                    }
                }
            }
        break;
    
    case 1: // tiles
        if (mouse_wheel_up())
            tselect = min(2,tselect+1);
        if (mouse_wheel_down())
            tselect = max(0,tselect-1);
        
        if (device_mouse_x_to_gui(0) &lt; 132)
        and (device_mouse_y_to_gui(0) &gt; 64)
            {
            var mx = device_mouse_x_to_gui(0);
            var my = device_mouse_y_to_gui(0);
            var bw = background_get_width(tileset[tselect]);
            var bh = background_get_height(tileset[tselect]);
            
            // tile selection x/y
            if (mouse_check_button_pressed(mb_left))
                {
                if (point_in_rectangle(mx,my,6,70,6+bw-1,70+bh-1))
                    {
                    tclickx1 = floor((mx-6)/20);
                    tclicky1 = floor((my-70)/20);
                    tselectg = true;
                    }
                }
            // tile selection w/h
            if (tselectg)
                {
                if (!mouse_check_button(mb_left))
                or (!point_in_rectangle(mx,my,6,70,6+bw-1,70+bh-1))
                    tselectg = false;
                else
                    {
                    tclickx2 = clamp(floor((mx-6)/20),0,floor(bw/20));
                    tclicky2 = clamp(floor((my-70)/20),0,floor(bh/20));
                    
                    if (tclickx1 &lt;= tclickx2)
                        {
                        tselectx = tclickx1;
                        tselectw = max(1,(tclickx2+1)-tclickx1);
                        }
                    else
                        {
                        tselectx = tclickx2;
                        tselectw = max(1,(tclickx1+1)-tclickx2);
                        }
                    if (tclicky1 &lt;= tclicky2)
                        {
                        tselecty = tclicky1;
                        tselecth = max(1,(tclicky2+1)-tclicky1);
                        }
                    else
                        {
                        tselecty = tclicky2;
                        tselecth = max(1,(tclicky1+1)-tclicky2);
                        }
                    }
                }
            }
        if (device_mouse_x_to_gui(0) &gt; 132)
        and (device_mouse_y_to_gui(0) &gt; 64)
            {
            if (keyboard_check(vk_alt))
                {
                var mx = floor(mouse_x/10)*10;
                var my = floor(mouse_y/10)*10;
                }
            else
                {
                var mx = floor(mouse_x/20)*20;
                var my = floor(mouse_y/20)*20;
                }
            
            if (mouse_check_button(mb_left))
                {
                for(var i=0; i&lt;tselectw; i++;)
                    {
                    for(var j=0; j&lt;tselecth; j++;)
                        {
                        if (tile_layer_find(layer_depth[layer],mx+i*20,my+j*20) == -1)
                            {
                            tile_add(tileset[tselect],(tselectx+i)*20,(tselecty+j)*20,20,20,mx+i*20,my+j*20,layer_depth[layer]);
                            layer_count[layer]++;
                            }
                        }
                    }
                }
            if (mouse_check_button(mb_right))
                {
                for(var i=0; i&lt;tselectw; i++;)
                    {
                    for(var j=0; j&lt;tselecth; j++;)
                        {
                        if (tile_layer_find(layer_depth[layer],mx+i*20,my+j*20) &gt; -1)
                            {
                            tile_layer_delete_at(layer_depth[layer],mx+i*20,my+j*20);
                            layer_count[layer] = max(0,layer_count[layer]-1);
                            }
                        }
                    }
                }
            }
        break;
    
    case 2: // systems
        if (mouse_wheel_up())
            sscroll = max(0,sscroll-1);
        if (mouse_wheel_down())
            sscroll = min(sscroll+1,0);
        
        if (device_mouse_x_to_gui(0) &gt; 128)
        and (device_mouse_y_to_gui(0) &gt; 64)
            {
            var spr = object_get_sprite(system[sselect]);
            var sw = sprite_get_width(spr);
            var sh = sprite_get_height(spr);
            var ox = sprite_get_xoffset(spr);
            var oy = sprite_get_yoffset(spr);
            
            if (keyboard_check(vk_alt))
                {
                var mx = floor(mouse_x/10)*10;
                var my = floor(mouse_y/10)*10;
                }
            else
                {
                var mx = floor(mouse_x/20)*20;
                var my = floor(mouse_y/20)*20;
                }
            
            // add systems
            if (mouse_check_button(mb_left))
                {
                if (!ds_map_exists(system_map,string(mx)+":"+string(my)))
                    {
                    var inst = instance_create(mx+ox,my+oy,system[sselect]);
                    inst.visible = true;
                    
                    if (system[sselect] == obj_camera_path)
                        ds_map_set(inst.propmap,"cam_state",scamera);
                    
                    ds_map_add(system_map,string(mx)+":"+string(my),inst);
                    }
                }
        
            if (instance_number(obj_player_spawn) &gt; 1)
                {
                var inst = instance_find(obj_player_spawn,0);
                with(obj_player_spawn)
                    {
                    if (id &gt; inst.id)
                        instance_destroy();
                    }
                }
            
            // delete systems
            if (mouse_check_button(mb_right))
                {
                if (ds_map_exists(system_map,string(mx)+":"+string(my)))
                    {
                    with(ds_map_find_value(system_map,string(mx)+":"+string(my)))
                        instance_destroy();
                    
                    ds_map_delete(system_map,string(mx)+":"+string(my));
                    }
                }
            }
        break;
    
    case 3: // entities
        if (mouse_wheel_up())
            escroll = max(0,escroll-1);
        if (mouse_wheel_down())
            escroll = min(escroll+1,0);
        
        if (device_mouse_x_to_gui(0) &gt; 128)
        and (device_mouse_y_to_gui(0) &gt; 64)
            {
            var spr = object_get_sprite(entity[eselect]);
            var sw = sprite_get_width(spr);
            var sh = sprite_get_height(spr);
            var ox = sprite_get_xoffset(spr);
            var oy = sprite_get_yoffset(spr);
            
            if (keyboard_check(vk_alt))
                {
                var mx = floor(mouse_x/10)*10;
                var my = floor(mouse_y/10)*10;
                }
            else
                {
                var mx = floor(mouse_x/20)*20;
                var my = floor(mouse_y/20)*20;
                }
            
            // add entities
            if (mouse_check_button(mb_left))
                {
                if (!ds_map_exists(entity_map,string(mx)+":"+string(my)))
                    {
                    var inst = instance_create(mx+ox,my+oy,entity[eselect]);
                    inst.visible = true;
                    
                    ds_map_add(entity_map,string(mx)+":"+string(my),inst);
                    }
                }
            
            // delete entities
            if (mouse_check_button(mb_right))
                {
                if (ds_map_exists(entity_map,string(mx)+":"+string(my)))
                    {
                    with(ds_map_find_value(entity_map,string(mx)+":"+string(my)))
                        instance_destroy();
                    
                    ds_map_delete(entity_map,string(mx)+":"+string(my));
                    }
                }
            }
        break;
    }

// update alphas/visibility
if (oldmode != mode)
    {
    oldmode = mode;
    cupdate = true;
    tupdate = true;
    supdate = true;
    eupdate = true;
    }

if (mode == -1)
    exit;

if (cupdate)
    {
    cupdate = false;
    
    var calpha = 0.2;
    if (mode == 0)
        calpha = 1.0;
    
    var key = ds_map_find_first(collide_map);
    while(key != undefined)
        {
        var inst = ds_map_find_value(collide_map,key);
        with(inst)
            image_alpha = calpha;
        var key = ds_map_find_next(collide_map,key);
        }
    }
if (tupdate)
    {
    tupdate = false;
    
    var talpha;
    for(var i=0; i&lt;layers; i++;)
        talpha[i] = 0.2;
    if (mode == 1)
        talpha[layer] = 1.0;
    
    for(var i=0; i&lt;layers; i++;)
        {
        var tiles = tile_get_ids_at_depth(layer_depth[i]);
        for(var j=0; j&lt;array_length_1d(tiles); j++;)
            {
            var tile = tiles[j];
            if (tile_exists(tile))
                tile_set_alpha(tile,talpha[i]);
            }
        }
    }
if (supdate)
    {
    supdate = false;
    
    var salpha = 0.2;
    if (mode == 2)
        salpha = 1.0;
    
    var key = ds_map_find_first(system_map);
    while(key != undefined)
        {
        var inst = ds_map_find_value(system_map,key);
        with(inst)
            image_alpha = salpha;
        var key = ds_map_find_next(system_map,key);
        }
    }
if (eupdate)
    {
    eupdate = false;
    
    var ealpha = 0.2;
    if (mode == 2)
        ealpha = 1.0;
    
    var key = ds_map_find_first(entity_map);
    while(key != undefined)
        {
        var inst = ds_map_find_value(entity_map,key);
        with(inst)
            image_alpha = ealpha;
        var key = ds_map_find_next(entity_map,key);
        }
    }

// keyboard shortcuts
if (keyboard_check(vk_control))
    {
    if (keyboard_check_pressed(ord("N")))
        action = 0;
    if (keyboard_check_pressed(ord("L")))
        action = 1;
    if (keyboard_check_pressed(ord("S")))
        action = 2;
    if (keyboard_check_pressed(ord("P")))
        action = 3;
    if (keyboard_check_pressed(ord("G")))
        action = 4;
    }

// perform actions
if (action &gt; -1)
    {
    switch(action)
        {
        case 0: // new map
            if (show_question("Are you sure you want to clear the map? All unsaved progress will be lost!"))
                editor_clear();
            break;
        case 1: // load map
            if (show_question("Are you sure you want to load another map? All unsaved progress will be lost!"))
                {
                var filepath = get_open_filename("Map Files|*.chad","");
                if (filepath != "" and file_exists(filepath))
                    editor_load(filepath);
                }
            break;
        case 2: // save map
            var filepath = get_save_filename("Map Files|*.chad","");
            if (filepath != "")
                editor_save(filepath);
            break;
        case 3: // playtest
            editor_play();
            break;
        case 4: // toggle grid
            grid = !grid;
            break;
        }
    action = -1;
    }

view_xview[0] += (keyboard_check(ord("D"))-keyboard_check(ord("A")))*4;
view_yview[0] += (keyboard_check(ord("S"))-keyboard_check(ord("W")))*4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*

var mx = device_mouse_x_to_gui(0);
var my = device_mouse_y_to_gui(0);

if (mode == -1) // playtest
    {
    draw_text(12,12,"Press [P] to Edit");
    exit;
    }

var xpos = 0;
var menu;
menu[0] = "New";
menu[1] = "Load";
menu[2] = "Save";
menu[3] = "Playtest";
menu[4] = "Toggle Grid";
for(var i=0; i&lt;5; i++;)
    {
    var sw = string_width(menu[i]);
    if (point_in_rectangle(mx,my,xpos,0,xpos+sw+11,31))
        {
        draw_set_color($FFFFFF);
        draw_rectangle(xpos,0,xpos+sw+12,31,0);
        draw_set_color($000000);
        draw_text(xpos+6,6,menu[i]);
        
        if (mouse_check_button_pressed(mb_left))
            action = i;
        }
    else
        {
        draw_set_color($000000);
        draw_rectangle(xpos,0,xpos+sw+12,31,0);
        draw_set_color($FFFFFF);
        draw_text(xpos+6,6,menu[i]);
        }
    xpos += sw+12;
    }

draw_set_color($000000);
draw_set_alpha(0.6);
draw_rectangle(xpos,0,view_wview[0],31,0);
draw_set_alpha(1.0);
draw_text_outline(xpos+6,6,global.levelname);

var xpos = 0;
var tab;
tab[0] = "Colliders";
tab[1] = "Tiles";
tab[2] = "System";
tab[3] = "Entities";
for(var i=0; i&lt;4; i++;)
    {
    var sw = string_width(tab[i]);
    if (point_in_rectangle(mx,my,xpos,32,xpos+sw+11,63))
        {
        draw_set_color($FFFFFF);
        draw_rectangle(xpos,32,xpos+sw+12,63,0);
        draw_set_color($000000);
        draw_text(xpos+6,38,tab[i]);
        
        if (mouse_check_button_pressed(mb_left))
            mode = i;
        }
    else
        {
        draw_set_color($000000);
        draw_rectangle(xpos,32,xpos+sw+12,63,0);
        draw_set_color($FFFFFF);
        draw_text(xpos+6,38,tab[i]);
        }
    xpos += sw+12;
    }

if (mode == 1)
    {
    lslidex = xpos+string_width("Depth: -25")+12;
    var x1 = lslidex+lslideb/2;
    var x2 = lslidex+lslidew-lslideb/2;
    var sw = x2-x1;
    var sx = x1+(lslidev*sw);
    
    draw_set_color($000000);
    draw_rectangle(xpos,32,lslidex+lslidew+12,63,0);
    draw_set_color($424242);
    draw_rectangle(lslidex,38,lslidex+lslidew,57,1);
    
    var rw = round((lslidew-(layers+1)*2)/layers);
    for(var i=0; i&lt;layers; i++;)
        {
        var rx = lslidex+2 + i*rw + 2*i;
        if (layer_count[i] &gt; 0)
            draw_set_color($777777);
        else
            draw_set_color($424242);
        draw_rectangle(rx,53,rx+rw,55,0);
        }
    
    draw_set_color($424242);
    draw_text(lslidex+6,38,"back");
    draw_text(lslidex+lslidew-string_width("front")-4,38,"front");
    if (lslideg)
        {
        lslidev = clamp((mx-x1)/sw,0,1);
        draw_set_color($FFFFFF);
        draw_rectangle(sx-lslideb/2,38,sx+lslideb/2,57,0);
        var val = round(lslidev*(layers-1));
        if (layer != val)
            {
            tupdate = true;
            layer = val;
            }
        if (!mouse_check_button(mb_left))
        or (device_mouse_y_to_gui(0) &gt; 64)
            lslideg = false;
        }
    else
        {
        if (point_in_rectangle(mx,my,lslidex,32,lslidex+lslidew,63))
            {
            draw_set_color($FFFFFF);
            draw_rectangle(sx-lslideb/2,38,sx+lslideb/2,57,0);
            if (mouse_check_button_pressed(mb_left))
                lslideg = true;
            }
        else
            {
            draw_set_color($AAAAAA);
            draw_rectangle(sx-lslideb/2,38,sx+lslideb/2,57,0);
            }
        }
    draw_set_color($FFFFFF);
    draw_text(xpos+6,38,"Depth: "+string(layer_depth[layer]));
    xpos += lslidex+lslidew+12;
    }

draw_set_color($000000);

switch(mode)
    {
    case 0: // colliders
        draw_set_alpha(0.6);
        draw_rectangle(0,64,128,view_hview[0],0);
        draw_set_alpha(1.0);
        
        var ypos = 0;
        for(var i=cscroll; i&lt;min(colliders,cscroll+8); i++;)
            {
            var str = string(collider_name[i]);
            var spr = object_get_sprite(collider[i]);
            var sw = sprite_get_width(spr);
            var sh = sprite_get_height(spr);
            var in = point_in_rectangle(mx,my,6,70+ypos*50,122,118+ypos*50);
            
            draw_sprite_ext(spr,0,12,76+ypos*50,20/sw,20/sh,0,-1,1);
            if (cselect == i)
                {
                draw_set_color($FFFFFF);
                draw_rectangle(6,70+ypos*50,122,118+ypos*50,1);
                draw_text(12,100+ypos*50,str);
                }
            else
                {
                if (in)
                    {
                    draw_set_color($CCCCCC);
                    draw_rectangle(6,70+ypos*50,122,118+ypos*50,1);
                    draw_text(12,100+ypos*50,str);
                    }
                else
                    {
                    draw_set_color($AAAAAA);
                    draw_text(12,100+ypos*50,str);
                    }
                }
            
            if (in and mouse_check_button_pressed(mb_left))
                cselect = i;
            
            ypos++;
            }
        break;
    
    case 1: // tiles
        draw_set_alpha(0.6);
        draw_rectangle(0,64,132,view_hview[0],0);
        draw_set_alpha(1.0);
        
        var bw = background_get_width(tileset[tselect]);
        var bh = background_get_height(tileset[tselect]);
        draw_background(tileset[tselect],6,70);
        
        if (point_in_rectangle(mx,my,6,70,6+bw-1,70+bh-1))
            {
            if (!tselectg)
                {
                var xpos = 06+floor((mx-6)/20)*20;
                var ypos = 70+floor((my-70)/20)*20;
                draw_set_color($AAAAAA);
                draw_rectangle(xpos,ypos,xpos+19,ypos+19,1);
                }
            }
        
        var xpos = 06+tselectx*20;
        var ypos = 70+tselecty*20;
        draw_set_color($FFFFFF);
        draw_rectangle(xpos,ypos,xpos-1+tselectw*20,ypos-1+tselecth*20,1);
        break;
    
    case 2: // system
        draw_set_alpha(0.6);
        draw_rectangle(0,64,128,view_hview[0],0);
        draw_set_alpha(1.0);
        
        var ypos = 0;
        for(var i=sscroll; i&lt;min(systems,sscroll+8); i++;)
            {
            var str = string(system_name[i]);
            var spr = object_get_sprite(system[i]);
            var sw = sprite_get_width(spr);
            var sh = sprite_get_height(spr);
            var ox = sprite_get_xoffset(spr)*(20/sw);
            var oy = sprite_get_yoffset(spr)*(20/sh);
            var in = point_in_rectangle(mx,my,6,70+ypos*50,122,118+ypos*50);
            
            draw_sprite_ext(spr,0,12+ox,76+oy+ypos*50,20/sw,20/sh,0,-1,1);
            if (sselect == i)
                {
                draw_set_color($FFFFFF);
                draw_rectangle(6,70+ypos*50,122,118+ypos*50,1);
                draw_text(12,100+ypos*50,str);
                }
            else
                {
                if (in)
                    {
                    draw_set_color($CCCCCC);
                    draw_rectangle(6,70+ypos*50,122,118+ypos*50,1);
                    draw_text(12,100+ypos*50,str);
                    }
                else
                    {
                    draw_set_color($AAAAAA);
                    draw_text(12,100+ypos*50,str);
                    }
                }
            
            if (i == 1) // camera
                {
                draw_sprite_ext(spr_camera_arrow,(scamera &amp; 1 == 1),112,095+ypos*50,1,1,000,-1,1);
                draw_sprite_ext(spr_camera_arrow,(scamera &amp; 2 == 2),099,081+ypos*50,1,1,090,-1,1);
                draw_sprite_ext(spr_camera_arrow,(scamera &amp; 4 == 4),085,094+ypos*50,1,1,180,-1,1);
                draw_sprite_ext(spr_camera_arrow,(scamera &amp; 8 == 8),098,108+ypos*50,1,1,270,-1,1);
                
                if (mouse_check_button_pressed(mb_left))
                    {
                    if (point_in_rectangle(mx,my,112-6,081-10+ypos*50,112+10,108+10+ypos*50))
                        scamera = scamera ^ 1;
                    if (point_in_rectangle(mx,my,085-10,081-10+ypos*50,112+10,081+6+ypos*50))
                        scamera = scamera ^ 2;
                    if (point_in_rectangle(mx,my,085-10,081-10+ypos*50,085+6,108+10+ypos*50))
                        scamera = scamera ^ 4;
                    if (point_in_rectangle(mx,my,085-10,108-6+ypos*50,112+10,108+10+ypos*50))
                        scamera = scamera ^ 8;
                    }
                }
            
            if (in and mouse_check_button_pressed(mb_left))
                sselect = i;
            
            ypos++;
            }
        break;
    
    case 3: // entities
        draw_set_alpha(0.6);
        draw_rectangle(0,64,128,view_hview[0],0);
        draw_set_alpha(1.0);
        
        var ypos = 0;
        for(var i=escroll; i&lt;min(entities,escroll+8); i++;)
            {
            var str = string(entity_name[i]);
            var spr = object_get_sprite(entity[i]);
            var sw = sprite_get_width(spr);
            var sh = sprite_get_height(spr);
            var ox = sprite_get_xoffset(spr)*(20/sw);
            var oy = sprite_get_yoffset(spr)*(20/sh);
            var in = point_in_rectangle(mx,my,6,70+ypos*50,122,118+ypos*50);
            
            draw_sprite_ext(spr,0,12+ox,76+oy+ypos*50,20/sw,20/sh,0,-1,1);
            if (eselect == i)
                {
                draw_set_color($FFFFFF);
                draw_rectangle(6,70+ypos*50,122,118+ypos*50,1);
                draw_text(12,100+ypos*50,str);
                }
            else
                {
                if (in)
                    {
                    draw_set_color($CCCCCC);
                    draw_rectangle(6,70+ypos*50,122,118+ypos*50,1);
                    draw_text(12,100+ypos*50,str);
                    }
                else
                    {
                    draw_set_color($AAAAAA);
                    draw_text(12,100+ypos*50,str);
                    }
                }
            
            if (in and mouse_check_button_pressed(mb_left))
                eselect = i;
            
            ypos++;
            }
        break;
    }

draw_set_color($000000);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*

if (mode == -1)
    exit;

draw_set_color($000000);

if (grid)
    {
    draw_primitive_begin(pr_linelist);
    if (keyboard_check(vk_alt))
        {
        for(var i=0; i&lt;=gridw*2; i++;)
            {
            draw_vertex(0,i*10);
            draw_vertex(gridw*20,i*10);
            }
        for(var i=0; i&lt;=gridh*2; i++;)
            {
            draw_vertex(i*10,0);
            draw_vertex(i*10,gridh*20);
            }
        }
    else
        {
        for(var i=0; i&lt;=gridw; i++;)
            {
            draw_vertex(0,i*20);
            draw_vertex(gridw*20,i*20);
            }
        for(var i=0; i&lt;=gridh; i++;)
            {
            draw_vertex(i*20,0);
            draw_vertex(i*20,gridh*20);
            }
        }
    draw_primitive_end();
    }

switch(mode)
    {
    case 0: // colliders
    case 2: // systems
    case 3: // entities
        if (device_mouse_x_to_gui(0) &gt; 128)
        and (device_mouse_y_to_gui(0) &gt; 64)
            {
            if (keyboard_check(vk_alt))
                {
                rx = floor(mouse_x/10)*10;
                ry = floor(mouse_y/10)*10;
                }
            else
                {
                rx = floor(mouse_x/20)*20;
                ry = floor(mouse_y/20)*20;
                }
            draw_set_color($FFFFFF);
            draw_rectangle(rx,ry,rx+19,ry+19,1);
            }
        break;
    case 1: // tiles
        if (device_mouse_x_to_gui(0) &gt; 132)
        and (device_mouse_y_to_gui(0) &gt; 64)
            {
            if (keyboard_check(vk_alt))
                {
                rx = floor(mouse_x/10)*10;
                ry = floor(mouse_y/10)*10;
                draw_set_color($FFFFFF);
                draw_rectangle(rx,ry,rx-1+tselectw*20,ry-1+tselecth*20,1);
                }
            else
                {
                rx = floor(mouse_x/20)*20;
                ry = floor(mouse_y/20)*20;
                draw_set_color($FFFFFF);
                draw_rectangle(rx,ry,rx-1+tselectw*20,ry-1+tselecth*20,1);
                }
            }
        break;
    }

var inst = instance_position(mouse_x,mouse_y,obj_camera_path);
if (inst != noone) and (instance_exists(inst))
    {
    var path = ds_map_find_value(inst.propmap,"cam_state");
    draw_sprite_ext(spr_camera_arrow,(path &amp; 1 == 1),inst.x+30,inst.y+10,1,1,000,-1,1);
    draw_sprite_ext(spr_camera_arrow,(path &amp; 2 == 2),inst.x+10,inst.y-10,1,1,090,-1,1);
    draw_sprite_ext(spr_camera_arrow,(path &amp; 4 == 4),inst.x-10,inst.y+10,1,1,180,-1,1);
    draw_sprite_ext(spr_camera_arrow,(path &amp; 8 == 8),inst.x+10,inst.y+30,1,1,270,-1,1);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
