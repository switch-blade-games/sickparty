<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>cell_bubble_spr</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// grab the texture from our sprite
tex = sprite_get_texture(sprite_index,0);

// tuners
precision = 12;
radius = 30;
radius_warp = 4; // radius +/- radius_warp = min/max radius

// generate offsets
warp = random_range(0,2*pi);
for(var i=0; i&lt;precision; i++;)
    {
    angle[i] = i*(360/precision);
    offset[i] = warp;
    warp += random_range(-0.5,0.5);
    if (warp &lt; 0)
        warp += 2*pi;
    if (warp &gt; 2*pi)
        warp -= 2*pi;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color($FFFFFF);

draw_primitive_begin_texture(pr_trianglefan,tex);

// draw middle vertex
draw_vertex_texture(x,y,0.5,0.5);
// draw ring of vertices
for(var i=0; i&lt;precision; i++;)
    {
    var rad = radius + sin(current_time/700 + offset[i])*radius_warp;
    var ldx = lengthdir_x(1,angle[i]);
    var ldy = lengthdir_y(1,angle[i]);
    draw_vertex_texture(x+ldx*rad,y+ldy*rad,0.5+ldx*0.5,0.5+ldy*0.5);
    }
// final connecting vertex
var rad = radius + sin(current_time/700 + offset[0])*radius_warp;
var ldx = lengthdir_x(1,angle[0]);
var ldy = lengthdir_y(1,angle[0]);
draw_vertex_texture(x+ldx*rad,y+ldy*rad,0.5+ldx*0.5,0.5+ldy*0.5);

draw_primitive_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
